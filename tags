!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AcSensorSpan	helper/deviceconfiguration.h	/^    uint16_t AcSensorSpan;$/;"	m	struct:DataGatherConfiguration	access:public
AlignCenter	setting/DMSNavigation.h	/^   enum HorizontalAlignment { AlignLeft, AlignCenter, AlignRight };$/;"	e	enum:DMSNavigation::HorizontalAlignment
AlignLeft	setting/DMSNavigation.h	/^   enum HorizontalAlignment { AlignLeft, AlignCenter, AlignRight };$/;"	e	enum:DMSNavigation::HorizontalAlignment
AlignRight	setting/DMSNavigation.h	/^   enum HorizontalAlignment { AlignLeft, AlignCenter, AlignRight };$/;"	e	enum:DMSNavigation::HorizontalAlignment
Body	setting/DMSNavigation.cpp	/^   const unsigned char Body[215] =$/;"	m	namespace:PNG	file:
BodyClicked	setting/DMSNavigation.cpp	/^   unsigned char BodyClicked[237] =$/;"	m	namespace:PNG	file:
BodyClickedSize	setting/DMSNavigation.cpp	/^   const unsigned int BodyClickedSize = 237;$/;"	m	namespace:PNG	file:
BodyHover	setting/DMSNavigation.cpp	/^   const unsigned char BodyHover[226] =$/;"	m	namespace:PNG	file:
BodyHoverSize	setting/DMSNavigation.cpp	/^   const unsigned int BodyHoverSize = 226;$/;"	m	namespace:PNG	file:
BodySize	setting/DMSNavigation.cpp	/^   const unsigned int BodySize = 215;$/;"	m	namespace:PNG	file:
BorderLeft	setting/DMSNavigation.cpp	/^   const unsigned char BorderLeft[215] =$/;"	m	namespace:PNG	file:
BorderLeftSize	setting/DMSNavigation.cpp	/^   const unsigned int BorderLeftSize = 215;$/;"	m	namespace:PNG	file:
BorderRight	setting/DMSNavigation.cpp	/^   const unsigned char BorderRight[208] =$/;"	m	namespace:PNG	file:
BorderRightSize	setting/DMSNavigation.cpp	/^   const unsigned int BorderRightSize = 208;$/;"	m	namespace:PNG	file:
COL	mainwindow.h	/^    const int COL = 3;$/;"	m	class:MainWindow	access:public
COLLECTIONSETTING_H	setting/tableWidget/collectionsetting.h	2;"	d
CONTENT_MARGIN	setting/DMSNavigation.cpp	/^const int CONTENT_MARGIN = CONTENT_MARGIN_LEFT + CONTENT_MARGIN_RIGHT;$/;"	v
CONTENT_MARGIN_LEFT	setting/DMSNavigation.cpp	/^const int CONTENT_MARGIN_LEFT = 16;$/;"	v
CONTENT_MARGIN_RIGHT	setting/DMSNavigation.cpp	/^const int CONTENT_MARGIN_RIGHT = 16;$/;"	v
CollectionSetting	setting/tableWidget/collectionsetting.cpp	/^CollectionSetting::CollectionSetting(QWidget *parent) : QWidget(parent)$/;"	f	class:CollectionSetting	signature:(QWidget *parent)
CollectionSetting	setting/tableWidget/collectionsetting.h	/^    explicit CollectionSetting(QWidget *parent = 0);$/;"	p	class:CollectionSetting	access:public	signature:(QWidget *parent = 0)
CollectionSetting	setting/tableWidget/collectionsetting.h	/^class CollectionSetting : public QWidget$/;"	c	inherits:QWidget
CollectionSetting::CollectionSetting	setting/tableWidget/collectionsetting.cpp	/^CollectionSetting::CollectionSetting(QWidget *parent) : QWidget(parent)$/;"	f	class:CollectionSetting	signature:(QWidget *parent)
CollectionSetting::CollectionSetting	setting/tableWidget/collectionsetting.h	/^    explicit CollectionSetting(QWidget *parent = 0);$/;"	p	class:CollectionSetting	access:public	signature:(QWidget *parent = 0)
CollectionSetting::baudRateBox	setting/tableWidget/collectionsetting.h	/^    QComboBox   *baudRateBox;$/;"	m	class:CollectionSetting	access:public
CollectionSetting::checkDigitBox	setting/tableWidget/collectionsetting.h	/^    QComboBox   *checkDigitBox;$/;"	m	class:CollectionSetting	access:public
CollectionSetting::closeCollection	setting/tableWidget/collectionsetting.h	/^    void closeCollection();$/;"	p	class:CollectionSetting	access:public	signature:()
CollectionSetting::finishedDevCalibrate	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::finishedDevCalibrate(){}$/;"	f	class:CollectionSetting	signature:()
CollectionSetting::finishedDevCalibrate	setting/tableWidget/collectionsetting.h	/^    void    finishedDevCalibrate();$/;"	p	class:CollectionSetting	access:public	signature:()
CollectionSetting::finishedDevConfigSet	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::finishedDevConfigSet(){}$/;"	f	class:CollectionSetting	signature:()
CollectionSetting::finishedDevConfigSet	setting/tableWidget/collectionsetting.h	/^    void    finishedDevConfigSet();$/;"	p	class:CollectionSetting	access:public	signature:()
CollectionSetting::initButtonArrayUI	setting/tableWidget/collectionsetting.cpp	/^void CollectionSetting::initButtonArrayUI()$/;"	f	class:CollectionSetting	signature:()
CollectionSetting::initButtonArrayUI	setting/tableWidget/collectionsetting.h	/^    void    initButtonArrayUI();$/;"	p	class:CollectionSetting	access:private	signature:()
CollectionSetting::initCheckArrayUI	setting/tableWidget/collectionsetting.cpp	/^void CollectionSetting::initCheckArrayUI()$/;"	f	class:CollectionSetting	signature:()
CollectionSetting::initCheckArrayUI	setting/tableWidget/collectionsetting.h	/^    void    initCheckArrayUI();$/;"	p	class:CollectionSetting	access:private	signature:()
CollectionSetting::initDev	setting/tableWidget/collectionsetting.cpp	/^void CollectionSetting::initDev()$/;"	f	class:CollectionSetting	signature:()
CollectionSetting::initDev	setting/tableWidget/collectionsetting.h	/^    void    initDev();$/;"	p	class:CollectionSetting	access:private	signature:()
CollectionSetting::initMidWidgetUI	setting/tableWidget/collectionsetting.cpp	/^void CollectionSetting::initMidWidgetUI()$/;"	f	class:CollectionSetting	signature:()
CollectionSetting::initMidWidgetUI	setting/tableWidget/collectionsetting.h	/^    void    initMidWidgetUI();$/;"	p	class:CollectionSetting	access:private	signature:()
CollectionSetting::lineArray	setting/tableWidget/collectionsetting.h	/^    QVector<QLineEdit *>            lineArray;$/;"	m	class:CollectionSetting	access:public
CollectionSetting::mainLayout	setting/tableWidget/collectionsetting.h	/^    QHBoxLayout *mainLayout;$/;"	m	class:CollectionSetting	access:public
CollectionSetting::modNumBox	setting/tableWidget/collectionsetting.h	/^    QComboBox   *modNumBox;$/;"	m	class:CollectionSetting	access:public
CollectionSetting::onGotDevInfo	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::onGotDevInfo(bool isok,DataGatherConfiguration cfg)$/;"	f	class:CollectionSetting	signature:(bool isok,DataGatherConfiguration cfg)
CollectionSetting::onGotDevInfo	setting/tableWidget/collectionsetting.h	/^    void    onGotDevInfo(bool,DataGatherConfiguration);$/;"	p	class:CollectionSetting	access:public	signature:(bool,DataGatherConfiguration)
CollectionSetting::onSearchDeviceFinished	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::onSearchDeviceFinished()$/;"	f	class:CollectionSetting	signature:()
CollectionSetting::onSearchDeviceFinished	setting/tableWidget/collectionsetting.h	/^    void    onSearchDeviceFinished();$/;"	p	class:CollectionSetting	access:public	signature:()
CollectionSetting::onSetDevConfigFinished	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::onSetDevConfigFinished(bool isok)$/;"	f	class:CollectionSetting	signature:(bool isok)
CollectionSetting::onSetDevConfigFinished	setting/tableWidget/collectionsetting.h	/^    void    onSetDevConfigFinished(bool);$/;"	p	class:CollectionSetting	access:public	signature:(bool)
CollectionSetting::radioArray	setting/tableWidget/collectionsetting.h	/^    QVector<QButtonGroup *>    radioArray;$/;"	m	class:CollectionSetting	access:public
CollectionSetting::readEquPar	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::readEquPar(){}$/;"	f	class:CollectionSetting	signature:()
CollectionSetting::readEquPar	setting/tableWidget/collectionsetting.h	/^    void    readEquPar();$/;"	p	class:CollectionSetting	access:public	signature:()
CollectionSetting::readPassData	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::readPassData(){$/;"	f	class:CollectionSetting	signature:()
CollectionSetting::readPassData	setting/tableWidget/collectionsetting.h	/^    void    readPassData();$/;"	p	class:CollectionSetting	access:public	signature:()
CollectionSetting::readZigbeeData	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::readZigbeeData(){}$/;"	f	class:CollectionSetting	signature:()
CollectionSetting::readZigbeeData	setting/tableWidget/collectionsetting.h	/^    void    readZigbeeData();$/;"	p	class:CollectionSetting	access:public	signature:()
CollectionSetting::recvEdit	setting/tableWidget/collectionsetting.h	/^    QTextEdit       *recvEdit;$/;"	m	class:CollectionSetting	access:public
CollectionSetting::searchModNum	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::searchModNum()$/;"	f	class:CollectionSetting	signature:()
CollectionSetting::searchModNum	setting/tableWidget/collectionsetting.h	/^    void    searchModNum();$/;"	p	class:CollectionSetting	access:public	signature:()
CollectionSetting::sendEdit	setting/tableWidget/collectionsetting.h	/^    QTextEdit       *sendEdit;$/;"	m	class:CollectionSetting	access:public
CollectionSetting::setModNum	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::setModNum(){}$/;"	f	class:CollectionSetting	signature:()
CollectionSetting::setModNum	setting/tableWidget/collectionsetting.h	/^    void    setModNum();$/;"	p	class:CollectionSetting	access:public	signature:()
CollectionSetting::setPassType	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::setPassType()$/;"	f	class:CollectionSetting	signature:()
CollectionSetting::setPassType	setting/tableWidget/collectionsetting.h	/^    void    setPassType();$/;"	p	class:CollectionSetting	access:public	signature:()
CollectionSetting::test	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::test(QString str){$/;"	f	class:CollectionSetting	signature:(QString str)
CollectionSetting::test	setting/tableWidget/collectionsetting.h	/^    void    test(QString);$/;"	p	class:CollectionSetting	access:public	signature:(QString)
CollectionSetting::updateADCLine	setting/tableWidget/collectionsetting.cpp	/^void CollectionSetting::updateADCLine(int devId, uint16_t *pRes)$/;"	f	class:CollectionSetting	signature:(int devId, uint16_t *pRes)
CollectionSetting::updateADCLine	setting/tableWidget/collectionsetting.h	/^    void    updateADCLine(int devId, uint16_t *data);$/;"	p	class:CollectionSetting	access:public	signature:(int devId, uint16_t *data)
CollectionSetting::updateCheckArray	setting/tableWidget/collectionsetting.cpp	/^void CollectionSetting::updateCheckArray(QString str)$/;"	f	class:CollectionSetting	signature:(QString str)
CollectionSetting::updateCheckArray	setting/tableWidget/collectionsetting.h	/^    void    updateCheckArray(QString);$/;"	p	class:CollectionSetting	access:public	signature:(QString)
CollectionSetting::updateRecvText	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::updateRecvText(QByteArray msg){$/;"	f	class:CollectionSetting	signature:(QByteArray msg)
CollectionSetting::updateRecvText	setting/tableWidget/collectionsetting.h	/^    void    updateRecvText(QByteArray   msg);$/;"	p	class:CollectionSetting	access:public	signature:(QByteArray msg)
CollectionSetting::updateSendText	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::updateSendText(QByteArray msg){$/;"	f	class:CollectionSetting	signature:(QByteArray msg)
CollectionSetting::updateSendText	setting/tableWidget/collectionsetting.h	/^    void    updateSendText(QByteArray msg);$/;"	p	class:CollectionSetting	access:public	signature:(QByteArray msg)
CollectionSetting::~CollectionSetting	setting/tableWidget/collectionsetting.cpp	/^CollectionSetting::~CollectionSetting()$/;"	f	class:CollectionSetting	signature:()
CollectionSetting::~CollectionSetting	setting/tableWidget/collectionsetting.h	/^    ~CollectionSetting();$/;"	p	class:CollectionSetting	access:public	signature:()
DEVICECONFIGURATION_H	helper/deviceconfiguration.h	2;"	d
DEVICEOPERATOR_H	helper/deviceoperator.h	2;"	d
DEVICEREGISTERMAP_H	helper/deviceregistermap.h	2;"	d
DMSItem	setting/DMSNavigation.cpp	/^   DMSItem()$/;"	f	class:DMSItem	access:public	signature:()
DMSItem	setting/DMSNavigation.cpp	/^class DMSItem $/;"	c	file:
DMSItem::DMSItem	setting/DMSNavigation.cpp	/^   DMSItem()$/;"	f	class:DMSItem	access:public	signature:()
DMSItem::icon	setting/DMSNavigation.cpp	/^   QPixmap icon;$/;"	m	class:DMSItem	file:	access:public
DMSItem::isClicked	setting/DMSNavigation.cpp	/^   bool isClicked;$/;"	m	class:DMSItem	file:	access:public
DMSItem::lastRect	setting/DMSNavigation.cpp	/^   QRect lastRect;$/;"	m	class:DMSItem	file:	access:public
DMSItem::title	setting/DMSNavigation.cpp	/^   QString title;$/;"	m	class:DMSItem	file:	access:public
DMSItem::width	setting/DMSNavigation.cpp	/^   inline int width(const QFontMetrics& fontMetrics) $/;"	f	class:DMSItem	access:public	signature:(const QFontMetrics& fontMetrics)
DMSNavigation	setting/DMSNavigation.cpp	/^DMSNavigation::DMSNavigation(QWidget* parent, Qt::WindowFlags flags)$/;"	f	class:DMSNavigation	signature:(QWidget* parent, Qt::WindowFlags flags)
DMSNavigation	setting/DMSNavigation.h	/^   explicit DMSNavigation(QWidget* parent = NULL, Qt::WindowFlags flags = 0);$/;"	p	class:DMSNavigation	access:public	signature:(QWidget* parent = NULL, Qt::WindowFlags flags = 0)
DMSNavigation	setting/DMSNavigation.h	/^class DMSNavigation : public QWidget$/;"	c	inherits:QWidget
DMSNavigation::AlignCenter	setting/DMSNavigation.h	/^   enum HorizontalAlignment { AlignLeft, AlignCenter, AlignRight };$/;"	e	enum:DMSNavigation::HorizontalAlignment
DMSNavigation::AlignLeft	setting/DMSNavigation.h	/^   enum HorizontalAlignment { AlignLeft, AlignCenter, AlignRight };$/;"	e	enum:DMSNavigation::HorizontalAlignment
DMSNavigation::AlignRight	setting/DMSNavigation.h	/^   enum HorizontalAlignment { AlignLeft, AlignCenter, AlignRight };$/;"	e	enum:DMSNavigation::HorizontalAlignment
DMSNavigation::DMSNavigation	setting/DMSNavigation.cpp	/^DMSNavigation::DMSNavigation(QWidget* parent, Qt::WindowFlags flags)$/;"	f	class:DMSNavigation	signature:(QWidget* parent, Qt::WindowFlags flags)
DMSNavigation::DMSNavigation	setting/DMSNavigation.h	/^   explicit DMSNavigation(QWidget* parent = NULL, Qt::WindowFlags flags = 0);$/;"	p	class:DMSNavigation	access:public	signature:(QWidget* parent = NULL, Qt::WindowFlags flags = 0)
DMSNavigation::HorizontalAlignment	setting/DMSNavigation.h	/^   enum HorizontalAlignment { AlignLeft, AlignCenter, AlignRight };$/;"	g	class:DMSNavigation	access:public
DMSNavigation::addTab	setting/DMSNavigation.cpp	/^int DMSNavigation::addTab(QWidget* widget, const QIcon& icon, const QString& text)$/;"	f	class:DMSNavigation	signature:(QWidget* widget, const QIcon& icon, const QString& text)
DMSNavigation::addTab	setting/DMSNavigation.cpp	/^int DMSNavigation::addTab(QWidget* widget, const QString& text)$/;"	f	class:DMSNavigation	signature:(QWidget* widget, const QString& text)
DMSNavigation::addTab	setting/DMSNavigation.h	/^   int addTab(QWidget* widget, const QIcon& icon, const QString& text);$/;"	p	class:DMSNavigation	access:public	signature:(QWidget* widget, const QIcon& icon, const QString& text)
DMSNavigation::addTab	setting/DMSNavigation.h	/^   int addTab(QWidget* widget, const QString& text);$/;"	p	class:DMSNavigation	access:public	signature:(QWidget* widget, const QString& text)
DMSNavigation::count	setting/DMSNavigation.cpp	/^int DMSNavigation::count() const$/;"	f	class:DMSNavigation	signature:() const
DMSNavigation::count	setting/DMSNavigation.h	/^   int count() const;$/;"	p	class:DMSNavigation	access:public	signature:() const
DMSNavigation::currentChanged	setting/DMSNavigation.h	/^   void currentChanged(int index);$/;"	p	class:DMSNavigation	access:public	signature:(int index)
DMSNavigation::currentIndex	setting/DMSNavigation.cpp	/^int DMSNavigation::currentIndex() const$/;"	f	class:DMSNavigation	signature:() const
DMSNavigation::currentIndex	setting/DMSNavigation.h	/^   int currentIndex() const;$/;"	p	class:DMSNavigation	access:public	signature:() const
DMSNavigation::horizontalAlignment	setting/DMSNavigation.cpp	/^DMSNavigation::HorizontalAlignment DMSNavigation::horizontalAlignment() const$/;"	f	class:DMSNavigation	signature:() const
DMSNavigation::horizontalAlignment	setting/DMSNavigation.h	/^   HorizontalAlignment horizontalAlignment() const;$/;"	p	class:DMSNavigation	access:public	signature:() const
DMSNavigation::insertTab	setting/DMSNavigation.cpp	/^int DMSNavigation::insertTab(int index, QWidget* widget, const QIcon& icon, const QString& text)$/;"	f	class:DMSNavigation	signature:(int index, QWidget* widget, const QIcon& icon, const QString& text)
DMSNavigation::insertTab	setting/DMSNavigation.cpp	/^int DMSNavigation::insertTab(int index, QWidget* widget, const QString& text)$/;"	f	class:DMSNavigation	signature:(int index, QWidget* widget, const QString& text)
DMSNavigation::insertTab	setting/DMSNavigation.h	/^   int insertTab(int index, QWidget* widget, const QIcon& icon, const QString& text);$/;"	p	class:DMSNavigation	access:public	signature:(int index, QWidget* widget, const QIcon& icon, const QString& text)
DMSNavigation::insertTab	setting/DMSNavigation.h	/^   int insertTab(int index, QWidget* widget, const QString& text);$/;"	p	class:DMSNavigation	access:public	signature:(int index, QWidget* widget, const QString& text)
DMSNavigation::navigation	setting/DMSNavigation.h	/^   DMSNavigationBar* navigation;$/;"	m	class:DMSNavigation	access:private
DMSNavigation::removeTab	setting/DMSNavigation.cpp	/^void DMSNavigation::removeTab(int index)$/;"	f	class:DMSNavigation	signature:(int index)
DMSNavigation::removeTab	setting/DMSNavigation.h	/^   void removeTab(int index);$/;"	p	class:DMSNavigation	access:public	signature:(int index)
DMSNavigation::setCurrentIndex	setting/DMSNavigation.cpp	/^void DMSNavigation::setCurrentIndex(int index)$/;"	f	class:DMSNavigation	signature:(int index)
DMSNavigation::setCurrentIndex	setting/DMSNavigation.h	/^   void setCurrentIndex(int index);$/;"	p	class:DMSNavigation	access:public	signature:(int index)
DMSNavigation::setHorizontalAlignment	setting/DMSNavigation.cpp	/^void DMSNavigation::setHorizontalAlignment(DMSNavigation::HorizontalAlignment alignment)$/;"	f	class:DMSNavigation	signature:(DMSNavigation::HorizontalAlignment alignment)
DMSNavigation::setHorizontalAlignment	setting/DMSNavigation.h	/^   void setHorizontalAlignment(HorizontalAlignment alignment);$/;"	p	class:DMSNavigation	access:public	signature:(HorizontalAlignment alignment)
DMSNavigation::setTabIcon	setting/DMSNavigation.cpp	/^void DMSNavigation::setTabIcon(int index, const QIcon& icon)$/;"	f	class:DMSNavigation	signature:(int index, const QIcon& icon)
DMSNavigation::setTabIcon	setting/DMSNavigation.h	/^   void setTabIcon(int index, const QIcon& icon);$/;"	p	class:DMSNavigation	access:public	signature:(int index, const QIcon& icon)
DMSNavigation::setTabText	setting/DMSNavigation.cpp	/^void DMSNavigation::setTabText(int index, const QString& text)$/;"	f	class:DMSNavigation	signature:(int index, const QString& text)
DMSNavigation::setTabText	setting/DMSNavigation.h	/^   void setTabText(int index, const QString& text);$/;"	p	class:DMSNavigation	access:public	signature:(int index, const QString& text)
DMSNavigation::stacked	setting/DMSNavigation.h	/^   QStackedWidget stacked;$/;"	m	class:DMSNavigation	access:private
DMSNavigation::tabIcon	setting/DMSNavigation.cpp	/^QIcon DMSNavigation::tabIcon(int index) const$/;"	f	class:DMSNavigation	signature:(int index) const
DMSNavigation::tabIcon	setting/DMSNavigation.h	/^   QIcon tabIcon(int index) const;$/;"	p	class:DMSNavigation	access:public	signature:(int index) const
DMSNavigation::tabText	setting/DMSNavigation.cpp	/^QString DMSNavigation::tabText(int index) const$/;"	f	class:DMSNavigation	signature:(int index) const
DMSNavigation::tabText	setting/DMSNavigation.h	/^   QString tabText(int index) const;$/;"	p	class:DMSNavigation	access:public	signature:(int index) const
DMSNavigation::~DMSNavigation	setting/DMSNavigation.cpp	/^DMSNavigation::~DMSNavigation()$/;"	f	class:DMSNavigation	signature:()
DMSNavigation::~DMSNavigation	setting/DMSNavigation.h	/^   ~DMSNavigation();$/;"	p	class:DMSNavigation	access:public	signature:()
DMSNavigationBar	setting/DMSNavigation.cpp	/^   explicit DMSNavigationBar(DMSNavigation* q, QWidget* parent = NULL, Qt::WindowFlags flags = 0);$/;"	p	class:DMSNavigationBar	file:	access:public	signature:(DMSNavigation* q, QWidget* parent = NULL, Qt::WindowFlags flags = 0)
DMSNavigationBar	setting/DMSNavigation.cpp	/^DMSNavigationBar::DMSNavigationBar(DMSNavigation* q, QWidget* parent, Qt::WindowFlags flags)$/;"	f	class:DMSNavigationBar	signature:(DMSNavigation* q, QWidget* parent, Qt::WindowFlags flags)
DMSNavigationBar	setting/DMSNavigation.cpp	/^class DMSNavigationBar : public QWidget$/;"	c	file:	inherits:QWidget
DMSNavigationBar::DMSNavigationBar	setting/DMSNavigation.cpp	/^   explicit DMSNavigationBar(DMSNavigation* q, QWidget* parent = NULL, Qt::WindowFlags flags = 0);$/;"	p	class:DMSNavigationBar	file:	access:public	signature:(DMSNavigation* q, QWidget* parent = NULL, Qt::WindowFlags flags = 0)
DMSNavigationBar::DMSNavigationBar	setting/DMSNavigation.cpp	/^DMSNavigationBar::DMSNavigationBar(DMSNavigation* q, QWidget* parent, Qt::WindowFlags flags)$/;"	f	class:DMSNavigationBar	signature:(DMSNavigation* q, QWidget* parent, Qt::WindowFlags flags)
DMSNavigationBar::addTab	setting/DMSNavigation.cpp	/^   int addTab(const QIcon& icon, const QString& text);$/;"	p	class:DMSNavigationBar	file:	access:public	signature:(const QIcon& icon, const QString& text)
DMSNavigationBar::addTab	setting/DMSNavigation.cpp	/^   int addTab(const QString& text);$/;"	p	class:DMSNavigationBar	file:	access:public	signature:(const QString& text)
DMSNavigationBar::addTab	setting/DMSNavigation.cpp	/^int DMSNavigationBar::addTab(const QIcon& icon, const QString& text)$/;"	f	class:DMSNavigationBar	signature:(const QIcon& icon, const QString& text)
DMSNavigationBar::addTab	setting/DMSNavigation.cpp	/^int DMSNavigationBar::addTab(const QString& text)$/;"	f	class:DMSNavigationBar	signature:(const QString& text)
DMSNavigationBar::count	setting/DMSNavigation.cpp	/^   int count() const;$/;"	p	class:DMSNavigationBar	file:	access:public	signature:() const
DMSNavigationBar::count	setting/DMSNavigation.cpp	/^int DMSNavigationBar::count() const$/;"	f	class:DMSNavigationBar	signature:() const
DMSNavigationBar::currentIndex	setting/DMSNavigation.cpp	/^   int currentIndex() const;$/;"	p	class:DMSNavigationBar	file:	access:public	signature:() const
DMSNavigationBar::currentIndex	setting/DMSNavigation.cpp	/^int DMSNavigationBar::currentIndex() const$/;"	f	class:DMSNavigationBar	signature:() const
DMSNavigationBar::enterEvent	setting/DMSNavigation.cpp	/^   virtual void enterEvent(QEvent* event);$/;"	p	class:DMSNavigationBar	file:	access:protected	signature:(QEvent* event)
DMSNavigationBar::enterEvent	setting/DMSNavigation.cpp	/^void DMSNavigationBar::enterEvent(QEvent* event)$/;"	f	class:DMSNavigationBar	signature:(QEvent* event)
DMSNavigationBar::horizontalAlignment	setting/DMSNavigation.cpp	/^   DMSNavigation::HorizontalAlignment horizontalAlignment() const;$/;"	p	class:DMSNavigationBar	file:	access:public	signature:() const
DMSNavigationBar::horizontalAlignment	setting/DMSNavigation.cpp	/^DMSNavigation::HorizontalAlignment DMSNavigationBar::horizontalAlignment() const$/;"	f	class:DMSNavigationBar	signature:() const
DMSNavigationBar::indexByPosition	setting/DMSNavigation.cpp	/^   int indexByPosition(const QPoint& position);$/;"	p	class:DMSNavigationBar	file:	access:private	signature:(const QPoint& position)
DMSNavigationBar::indexByPosition	setting/DMSNavigation.cpp	/^int DMSNavigationBar::indexByPosition(const QPoint& position)$/;"	f	class:DMSNavigationBar	signature:(const QPoint& position)
DMSNavigationBar::insertTab	setting/DMSNavigation.cpp	/^   int insertTab(int index, const QIcon& icon, const QString& text);$/;"	p	class:DMSNavigationBar	file:	access:public	signature:(int index, const QIcon& icon, const QString& text)
DMSNavigationBar::insertTab	setting/DMSNavigation.cpp	/^   int insertTab(int index, const QString& text);$/;"	p	class:DMSNavigationBar	file:	access:public	signature:(int index, const QString& text)
DMSNavigationBar::insertTab	setting/DMSNavigation.cpp	/^int DMSNavigationBar::insertTab(int index, const QIcon& icon, const QString& text)$/;"	f	class:DMSNavigationBar	signature:(int index, const QIcon& icon, const QString& text)
DMSNavigationBar::insertTab	setting/DMSNavigation.cpp	/^int DMSNavigationBar::insertTab(int index, const QString& text)$/;"	f	class:DMSNavigationBar	signature:(int index, const QString& text)
DMSNavigationBar::leaveEvent	setting/DMSNavigation.cpp	/^   virtual void leaveEvent(QEvent* event);$/;"	p	class:DMSNavigationBar	file:	access:protected	signature:(QEvent* event)
DMSNavigationBar::leaveEvent	setting/DMSNavigation.cpp	/^void DMSNavigationBar::leaveEvent(QEvent* event)$/;"	f	class:DMSNavigationBar	signature:(QEvent* event)
DMSNavigationBar::m_alignment	setting/DMSNavigation.cpp	/^   DMSNavigation::HorizontalAlignment m_alignment;$/;"	m	class:DMSNavigationBar	file:	access:private
DMSNavigationBar::m_itemList	setting/DMSNavigation.cpp	/^   QList<DMSItem*> m_itemList;$/;"	m	class:DMSNavigationBar	file:	access:private
DMSNavigationBar::m_nCurrentIndex	setting/DMSNavigation.cpp	/^   int m_nCurrentIndex;$/;"	m	class:DMSNavigationBar	file:	access:private
DMSNavigationBar::mouseMoveEvent	setting/DMSNavigation.cpp	/^   virtual void mouseMoveEvent(QMouseEvent* event);$/;"	p	class:DMSNavigationBar	file:	access:protected	signature:(QMouseEvent* event)
DMSNavigationBar::mouseMoveEvent	setting/DMSNavigation.cpp	/^void DMSNavigationBar::mouseMoveEvent(QMouseEvent* event)$/;"	f	class:DMSNavigationBar	signature:(QMouseEvent* event)
DMSNavigationBar::mousePressEvent	setting/DMSNavigation.cpp	/^   virtual void mousePressEvent(QMouseEvent* event);$/;"	p	class:DMSNavigationBar	file:	access:protected	signature:(QMouseEvent* event)
DMSNavigationBar::mousePressEvent	setting/DMSNavigation.cpp	/^void DMSNavigationBar::mousePressEvent(QMouseEvent* event)$/;"	f	class:DMSNavigationBar	signature:(QMouseEvent* event)
DMSNavigationBar::navigationItemWidth	setting/DMSNavigation.cpp	/^   int navigationItemWidth(int index, int reserved);$/;"	p	class:DMSNavigationBar	file:	access:private	signature:(int index, int reserved)
DMSNavigationBar::navigationItemWidth	setting/DMSNavigation.cpp	/^int DMSNavigationBar::navigationItemWidth(int index, int reserved)$/;"	f	class:DMSNavigationBar	signature:(int index, int reserved)
DMSNavigationBar::navigationWidth	setting/DMSNavigation.cpp	/^   int navigationWidth();$/;"	p	class:DMSNavigationBar	file:	access:private	signature:()
DMSNavigationBar::navigationWidth	setting/DMSNavigation.cpp	/^int DMSNavigationBar::navigationWidth()$/;"	f	class:DMSNavigationBar	signature:()
DMSNavigationBar::paintContent	setting/DMSNavigation.cpp	/^   void paintContent(const QRectF& rect, QPainter* painter, int index, int reserved);$/;"	p	class:DMSNavigationBar	file:	access:private	signature:(const QRectF& rect, QPainter* painter, int index, int reserved)
DMSNavigationBar::paintContent	setting/DMSNavigation.cpp	/^void DMSNavigationBar::paintContent(const QRectF& rect, QPainter* painter, int index, int reserved)$/;"	f	class:DMSNavigationBar	signature:(const QRectF& rect, QPainter* painter, int index, int reserved)
DMSNavigationBar::paintEvent	setting/DMSNavigation.cpp	/^   virtual void paintEvent(QPaintEvent* event);$/;"	p	class:DMSNavigationBar	file:	access:protected	signature:(QPaintEvent* event)
DMSNavigationBar::paintEvent	setting/DMSNavigation.cpp	/^void DMSNavigationBar::paintEvent(QPaintEvent*)$/;"	f	class:DMSNavigationBar	signature:(QPaintEvent*)
DMSNavigationBar::paintItem	setting/DMSNavigation.cpp	/^   void paintItem(const QRectF& rect, QPainter* painter, int index, int reserved);$/;"	p	class:DMSNavigationBar	file:	access:private	signature:(const QRectF& rect, QPainter* painter, int index, int reserved)
DMSNavigationBar::paintItem	setting/DMSNavigation.cpp	/^void DMSNavigationBar::paintItem(const QRectF& rect, QPainter* painter, int index, int reserved)$/;"	f	class:DMSNavigationBar	signature:(const QRectF& rect, QPainter* painter, int index, int reserved)
DMSNavigationBar::paintLeftBorder	setting/DMSNavigation.cpp	/^   void paintLeftBorder(const QRectF& rect, QPainter* painter);$/;"	p	class:DMSNavigationBar	file:	access:private	signature:(const QRectF& rect, QPainter* painter)
DMSNavigationBar::paintLeftBorder	setting/DMSNavigation.cpp	/^void DMSNavigationBar::paintLeftBorder(const QRectF& rect, QPainter* painter)$/;"	f	class:DMSNavigationBar	signature:(const QRectF& rect, QPainter* painter)
DMSNavigationBar::paintRightBorder	setting/DMSNavigation.cpp	/^   void paintRightBorder(const QRectF& rect, QPainter* painter);$/;"	p	class:DMSNavigationBar	file:	access:private	signature:(const QRectF& rect, QPainter* painter)
DMSNavigationBar::paintRightBorder	setting/DMSNavigation.cpp	/^void DMSNavigationBar::paintRightBorder(const QRectF& rect, QPainter* painter)$/;"	f	class:DMSNavigationBar	signature:(const QRectF& rect, QPainter* painter)
DMSNavigationBar::q_ptr	setting/DMSNavigation.cpp	/^   DMSNavigation* q_ptr;$/;"	m	class:DMSNavigationBar	file:	access:protected
DMSNavigationBar::removeTab	setting/DMSNavigation.cpp	/^   void removeTab(int index);$/;"	p	class:DMSNavigationBar	file:	access:public	signature:(int index)
DMSNavigationBar::removeTab	setting/DMSNavigation.cpp	/^void DMSNavigationBar::removeTab(int index)$/;"	f	class:DMSNavigationBar	signature:(int index)
DMSNavigationBar::setCurrentIndex	setting/DMSNavigation.cpp	/^   void setCurrentIndex(int index);$/;"	p	class:DMSNavigationBar	file:	access:public	signature:(int index)
DMSNavigationBar::setCurrentIndex	setting/DMSNavigation.cpp	/^void DMSNavigationBar::setCurrentIndex(int index)$/;"	f	class:DMSNavigationBar	signature:(int index)
DMSNavigationBar::setHorizontalAlignment	setting/DMSNavigation.cpp	/^   void setHorizontalAlignment(DMSNavigation::HorizontalAlignment alignment);$/;"	p	class:DMSNavigationBar	file:	access:public	signature:(DMSNavigation::HorizontalAlignment alignment)
DMSNavigationBar::setHorizontalAlignment	setting/DMSNavigation.cpp	/^void DMSNavigationBar::setHorizontalAlignment(DMSNavigation::HorizontalAlignment alignment)$/;"	f	class:DMSNavigationBar	signature:(DMSNavigation::HorizontalAlignment alignment)
DMSNavigationBar::setTabIcon	setting/DMSNavigation.cpp	/^   void setTabIcon(int index, const QIcon& icon);$/;"	p	class:DMSNavigationBar	file:	access:public	signature:(int index, const QIcon& icon)
DMSNavigationBar::setTabIcon	setting/DMSNavigation.cpp	/^void DMSNavigationBar::setTabIcon(int index, const QIcon& icon)$/;"	f	class:DMSNavigationBar	signature:(int index, const QIcon& icon)
DMSNavigationBar::setTabText	setting/DMSNavigation.cpp	/^   void setTabText(int index, const QString& text);$/;"	p	class:DMSNavigationBar	file:	access:public	signature:(int index, const QString& text)
DMSNavigationBar::setTabText	setting/DMSNavigation.cpp	/^void DMSNavigationBar::setTabText(int index, const QString& text)$/;"	f	class:DMSNavigationBar	signature:(int index, const QString& text)
DMSNavigationBar::tabIcon	setting/DMSNavigation.cpp	/^   QIcon tabIcon(int index) const;$/;"	p	class:DMSNavigationBar	file:	access:public	signature:(int index) const
DMSNavigationBar::tabIcon	setting/DMSNavigation.cpp	/^QIcon DMSNavigationBar::tabIcon(int index) const$/;"	f	class:DMSNavigationBar	signature:(int index) const
DMSNavigationBar::tabText	setting/DMSNavigation.cpp	/^   QString tabText(int index) const;$/;"	p	class:DMSNavigationBar	file:	access:public	signature:(int index) const
DMSNavigationBar::tabText	setting/DMSNavigation.cpp	/^QString DMSNavigationBar::tabText(int index) const$/;"	f	class:DMSNavigationBar	signature:(int index) const
DMSNavigationBar::~DMSNavigationBar	setting/DMSNavigation.cpp	/^   ~DMSNavigationBar();$/;"	p	class:DMSNavigationBar	file:	access:public	signature:()
DMSNavigationBar::~DMSNavigationBar	setting/DMSNavigation.cpp	/^DMSNavigationBar::~DMSNavigationBar()$/;"	f	class:DMSNavigationBar	signature:()
DMS_ITEM_ICON_MARGIN	setting/DMSNavigation.cpp	/^const int DMS_ITEM_ICON_MARGIN = 8;$/;"	v
DMS_ITEM_MAXIMUM_SIZE	setting/DMSNavigation.cpp	/^const int DMS_ITEM_MAXIMUM_SIZE = 120 + CONTENT_MARGIN;$/;"	v
DMS_ITEM_MINIMUM_SIZE	setting/DMSNavigation.cpp	/^const int DMS_ITEM_MINIMUM_SIZE = 40 + CONTENT_MARGIN;$/;"	v
DMS_NAVIGATION_H	setting/DMSNavigation.h	26;"	d
DataGatherConfiguration	helper/deviceconfiguration.h	/^struct DataGatherConfiguration {$/;"	s
DataGatherConfiguration::AcSensorSpan	helper/deviceconfiguration.h	/^    uint16_t AcSensorSpan;$/;"	m	struct:DataGatherConfiguration	access:public
DataGatherConfiguration::DcSensorSpan	helper/deviceconfiguration.h	/^    uint16_t DcSensorSpan;$/;"	m	struct:DataGatherConfiguration	access:public
DataGatherConfiguration::adcRefVoltage	helper/deviceconfiguration.h	/^    uint16_t adcRefVoltage;$/;"	m	struct:DataGatherConfiguration	access:public
DataGatherConfiguration::adcStatus	helper/deviceconfiguration.h	/^    uint16_t adcStatus;$/;"	m	struct:DataGatherConfiguration	access:public
DataGatherConfiguration::devID	helper/deviceconfiguration.h	/^    uint16_t devID;             \/\/ 采集器的Modbus地址$/;"	m	struct:DataGatherConfiguration	access:public
DataGatherConfiguration::firmwareVersion	helper/deviceconfiguration.h	/^    uint16_t firmwareVersion;$/;"	m	struct:DataGatherConfiguration	access:public
DataGatherConfiguration::hardwareVersion	helper/deviceconfiguration.h	/^    uint16_t hardwareVersion;$/;"	m	struct:DataGatherConfiguration	access:public
DataGatherConfiguration::inputMode	helper/deviceconfiguration.h	/^    uint16_t inputMode;$/;"	m	struct:DataGatherConfiguration	access:public
DataGatherConfiguration::inputType	helper/deviceconfiguration.h	/^    uint16_t inputType;$/;"	m	struct:DataGatherConfiguration	access:public
DataGatherConfiguration::modbusBaudrate	helper/deviceconfiguration.h	/^    uint16_t modbusBaudrate;    \/\/ 采集器使用的波特率索引$/;"	m	struct:DataGatherConfiguration	access:public
DataGatherConfiguration::modbusQuery	helper/deviceconfiguration.h	/^    uint16_t modbusQuery;$/;"	m	struct:DataGatherConfiguration	access:public
DataGatherConfiguration::parity	helper/deviceconfiguration.h	/^    ModbusParityMode parity;    \/\/ 采集器使用的校验方式$/;"	m	struct:DataGatherConfiguration	access:public
DataGatherConfiguration::productName	helper/deviceconfiguration.h	/^    uint8_t  productName[MB_REG_NAME_LENGTH];$/;"	m	struct:DataGatherConfiguration	access:public
DataGatherConfiguration::serialID	helper/deviceconfiguration.h	/^    uint8_t  serialID[MB_REG_SERIAL_LENGTH];$/;"	m	struct:DataGatherConfiguration	access:public
DataGatherConfiguration::zigbeeChannel	helper/deviceconfiguration.h	/^    uint16_t zigbeeChannel;$/;"	m	struct:DataGatherConfiguration	access:public
DataGatherConfiguration::zigbeeExist	helper/deviceconfiguration.h	/^    bool zigbeeExist;$/;"	m	struct:DataGatherConfiguration	access:public
DataGatherConfiguration::zigbeeLocalAddress	helper/deviceconfiguration.h	/^    uint16_t zigbeeLocalAddress;$/;"	m	struct:DataGatherConfiguration	access:public
DataGatherConfiguration::zigbeePanID	helper/deviceconfiguration.h	/^    uint16_t zigbeePanID;$/;"	m	struct:DataGatherConfiguration	access:public
DataGatherConfiguration::zigbeeTargetAddress	helper/deviceconfiguration.h	/^    uint16_t zigbeeTargetAddress;$/;"	m	struct:DataGatherConfiguration	access:public
DcSensorSpan	helper/deviceconfiguration.h	/^    uint16_t DcSensorSpan;$/;"	m	struct:DataGatherConfiguration	access:public
DeviceBaudrateList	helper/deviceoperator.cpp	/^const int DeviceOperator::DeviceBaudrateList[N_DEV_BAUDRATE] = {$/;"	m	class:DeviceOperator	file:
DeviceBaudrateList	helper/deviceoperator.h	/^    static const int DeviceBaudrateList[N_DEV_BAUDRATE];$/;"	m	class:DeviceOperator	access:public
DeviceOperator	helper/deviceoperator.cpp	/^DeviceOperator::DeviceOperator(QSerialPort* port, int maxID) :$/;"	f	class:DeviceOperator	signature:(QSerialPort* port, int maxID)
DeviceOperator	helper/deviceoperator.h	/^    DeviceOperator(QSerialPort* port, int maxID = 10);$/;"	p	class:DeviceOperator	access:public	signature:(QSerialPort* port, int maxID = 10)
DeviceOperator	helper/deviceoperator.h	/^class DeviceOperator : public QThread$/;"	c	inherits:QThread
DeviceOperator::DeviceBaudrateList	helper/deviceoperator.cpp	/^const int DeviceOperator::DeviceBaudrateList[N_DEV_BAUDRATE] = {$/;"	m	class:DeviceOperator	file:
DeviceOperator::DeviceBaudrateList	helper/deviceoperator.h	/^    static const int DeviceBaudrateList[N_DEV_BAUDRATE];$/;"	m	class:DeviceOperator	access:public
DeviceOperator::DeviceOperator	helper/deviceoperator.cpp	/^DeviceOperator::DeviceOperator(QSerialPort* port, int maxID) :$/;"	f	class:DeviceOperator	signature:(QSerialPort* port, int maxID)
DeviceOperator::DeviceOperator	helper/deviceoperator.h	/^    DeviceOperator(QSerialPort* port, int maxID = 10);$/;"	p	class:DeviceOperator	access:public	signature:(QSerialPort* port, int maxID = 10)
DeviceOperator::N_DEV_BAUDRATE	helper/deviceoperator.h	/^    static const int N_DEV_BAUDRATE = 11;$/;"	m	class:DeviceOperator	access:public
DeviceOperator::calibrateDevice	helper/deviceoperator.cpp	/^void DeviceOperator::calibrateDevice(int dev)$/;"	f	class:DeviceOperator	signature:(int dev)
DeviceOperator::calibrateDevice	helper/deviceoperator.h	/^    void calibrateDevice(int dev);$/;"	p	class:DeviceOperator	access:public	signature:(int dev)
DeviceOperator::devIsLegal	helper/deviceoperator.h	/^    static bool devIsLegal(int devID)$/;"	f	class:DeviceOperator	access:public	signature:(int devID)
DeviceOperator::deviceADCResultGot	helper/deviceoperator.h	/^    void deviceADCResultGot(int dev, uint16_t* pRes);$/;"	p	class:DeviceOperator	access:public	signature:(int dev, uint16_t* pRes)
DeviceOperator::deviceInformationGot	helper/deviceoperator.h	/^    void deviceInformationGot(bool fSuccess, DataGatherConfiguration);$/;"	p	class:DeviceOperator	access:public	signature:(bool fSuccess, DataGatherConfiguration)
DeviceOperator::finishedDevCalibrate	helper/deviceoperator.h	/^    void finishedDevCalibrate(bool fSuccess);$/;"	p	class:DeviceOperator	access:public	signature:(bool fSuccess)
DeviceOperator::finishedDevConfigSet	helper/deviceoperator.h	/^    void finishedDevConfigSet(bool fSuccess);$/;"	p	class:DeviceOperator	access:public	signature:(bool fSuccess)
DeviceOperator::finishedDevSearching	helper/deviceoperator.h	/^    void finishedDevSearching();$/;"	p	class:DeviceOperator	access:public	signature:()
DeviceOperator::getDeviceADCRes	helper/deviceoperator.cpp	/^void DeviceOperator::getDeviceADCRes(int dev)$/;"	f	class:DeviceOperator	signature:(int dev)
DeviceOperator::getDeviceADCRes	helper/deviceoperator.h	/^    void getDeviceADCRes(int dev);$/;"	p	class:DeviceOperator	access:public	signature:(int dev)
DeviceOperator::getDeviceInfo	helper/deviceoperator.cpp	/^void DeviceOperator::getDeviceInfo(int dev)$/;"	f	class:DeviceOperator	signature:(int dev)
DeviceOperator::getDeviceInfo	helper/deviceoperator.h	/^    void getDeviceInfo(int dev);$/;"	p	class:DeviceOperator	access:public	signature:(int dev)
DeviceOperator::getSearchMaxID	helper/deviceoperator.h	/^    int  getSearchMaxID(void) const { return maxSearchID; }$/;"	f	class:DeviceOperator	access:public	signature:(void) const
DeviceOperator::maxSearchID	helper/deviceoperator.h	/^    int maxSearchID;$/;"	m	class:DeviceOperator	access:private
DeviceOperator::parseDeviceConfig	helper/deviceoperator.cpp	/^bool DeviceOperator::parseDeviceConfig(DataGatherConfiguration& cfg, uint16_t* devRegs, int nRegs)$/;"	f	class:DeviceOperator	signature:(DataGatherConfiguration& cfg, uint16_t* devRegs, int nRegs)
DeviceOperator::parseDeviceConfig	helper/deviceoperator.h	/^    bool parseDeviceConfig(DataGatherConfiguration&, uint16_t*, int);$/;"	p	class:DeviceOperator	access:private	signature:(DataGatherConfiguration&, uint16_t*, int)
DeviceOperator::port	helper/deviceoperator.h	/^    QSerialPort* port;$/;"	m	class:DeviceOperator	access:public
DeviceOperator::readDevRegister	helper/deviceoperator.cpp	/^bool DeviceOperator::readDevRegister(uint16_t* pRegs, int dev, uint16_t startreg, uint16_t nRegisters)$/;"	f	class:DeviceOperator	signature:(uint16_t* pRegs, int dev, uint16_t startreg, uint16_t nRegisters)
DeviceOperator::readDevRegister	helper/deviceoperator.h	/^    bool readDevRegister(uint16_t* pRegs, int dev, uint16_t startreg, uint16_t nAddress);$/;"	p	class:DeviceOperator	access:private	signature:(uint16_t* pRegs, int dev, uint16_t startreg, uint16_t nAddress)
DeviceOperator::recvMsg	helper/deviceoperator.h	/^    void recvMsg(QByteArray);$/;"	p	class:DeviceOperator	access:public	signature:(QByteArray)
DeviceOperator::run	helper/deviceoperator.cpp	/^void DeviceOperator::run()$/;"	f	class:DeviceOperator	signature:()
DeviceOperator::run	helper/deviceoperator.h	/^    void run();$/;"	p	class:DeviceOperator	access:protected	signature:()
DeviceOperator::searchDevices	helper/deviceoperator.cpp	/^void DeviceOperator::searchDevices()$/;"	f	class:DeviceOperator	signature:()
DeviceOperator::searchDevices	helper/deviceoperator.h	/^    void searchDevices();$/;"	p	class:DeviceOperator	access:public	signature:()
DeviceOperator::sendMsg	helper/deviceoperator.h	/^    void sendMsg(QByteArray);$/;"	p	class:DeviceOperator	access:public	signature:(QByteArray)
DeviceOperator::setDeviceConfig	helper/deviceoperator.cpp	/^void DeviceOperator::setDeviceConfig(DataGatherConfiguration oldCfg, DataGatherConfiguration newCfg)$/;"	f	class:DeviceOperator	signature:(DataGatherConfiguration oldCfg, DataGatherConfiguration newCfg)
DeviceOperator::setDeviceConfig	helper/deviceoperator.h	/^    void setDeviceConfig(DataGatherConfiguration, DataGatherConfiguration);$/;"	p	class:DeviceOperator	access:public	signature:(DataGatherConfiguration, DataGatherConfiguration)
DeviceOperator::setSearchMaxID	helper/deviceoperator.h	/^    void setSearchMaxID(int max) { maxSearchID = max; }$/;"	f	class:DeviceOperator	access:public	signature:(int max)
DeviceOperator::stop	helper/deviceoperator.cpp	/^void DeviceOperator::stop()$/;"	f	class:DeviceOperator	signature:()
DeviceOperator::stop	helper/deviceoperator.h	/^    void stop();$/;"	p	class:DeviceOperator	access:public	signature:()
DeviceOperator::stopped	helper/deviceoperator.h	/^    bool stopped;$/;"	m	class:DeviceOperator	access:private
DeviceOperator::test	helper/deviceoperator.h	/^    void test(QString);$/;"	p	class:DeviceOperator	access:public	signature:(QString)
DeviceOperator::writeDevRegister	helper/deviceoperator.cpp	/^bool DeviceOperator::writeDevRegister(int dev, uint16_t regAddr, uint16_t value)$/;"	f	class:DeviceOperator	signature:(int dev, uint16_t regAddr, uint16_t value)
DeviceOperator::writeDevRegister	helper/deviceoperator.h	/^    bool writeDevRegister(int dev, uint16_t address, uint16_t value);$/;"	p	class:DeviceOperator	access:private	signature:(int dev, uint16_t address, uint16_t value)
HI_BYTE	helper/deviceregistermap.h	84;"	d
HorizontalAlignment	setting/DMSNavigation.h	/^   enum HorizontalAlignment { AlignLeft, AlignCenter, AlignRight };$/;"	g	class:DMSNavigation	access:public
LO_BYTE	helper/deviceregistermap.h	85;"	d
MAINWINDOW_H	mainwindow.h	2;"	d
MB_AC_SENSOR_OFFSET	helper/deviceregistermap.h	39;"	d
MB_BROADCAST_ADDR	helper/deviceregistermap.h	7;"	d
MB_CFG_NBAUDRATE	helper/deviceregistermap.h	82;"	d
MB_CODE_FUNC_READ_REG	helper/deviceregistermap.h	10;"	d
MB_CODE_FUNC_WRITE_REG	helper/deviceregistermap.h	9;"	d
MB_CTRL_ACCESS_KEY	helper/deviceregistermap.h	76;"	d
MB_DC_SENSOR_OFFSET	helper/deviceregistermap.h	40;"	d
MB_EVEN_PARITY	helper/deviceconfiguration.h	/^    MB_EVEN_PARITY,$/;"	e	enum:ModbusParityMode
MB_HW_VER_OFFSET	helper/deviceregistermap.h	38;"	d
MB_INVALID_PARITY	helper/deviceconfiguration.h	/^    MB_INVALID_PARITY$/;"	e	enum:ModbusParityMode
MB_MAX_DEVICE_ADDR	helper/deviceregistermap.h	4;"	d
MB_MIN_DEVICE_ADDR	helper/deviceregistermap.h	5;"	d
MB_NO_PARITY	helper/deviceconfiguration.h	/^    MB_NO_PARITY = 0,$/;"	e	enum:ModbusParityMode
MB_ODD_PARITY	helper/deviceconfiguration.h	/^    MB_ODD_PARITY,$/;"	e	enum:ModbusParityMode
MB_REG_AC_SENSORSPAN_ADDR	helper/deviceregistermap.h	16;"	d
MB_REG_ADCREF_OFFSET	helper/deviceregistermap.h	53;"	d
MB_REG_ADCRES_ADDR	helper/deviceregistermap.h	35;"	d
MB_REG_ADCRES_LENGTH	helper/deviceregistermap.h	36;"	d
MB_REG_ADCRES_OFFSET	helper/deviceregistermap.h	58;"	d
MB_REG_ADCST_OFFSET	helper/deviceregistermap.h	52;"	d
MB_REG_ADC_REF_ADDR	helper/deviceregistermap.h	28;"	d
MB_REG_ADC_ST_ADDR	helper/deviceregistermap.h	27;"	d
MB_REG_CFG_ADDR	helper/deviceregistermap.h	23;"	d
MB_REG_CFG_ADDR_MSK	helper/deviceregistermap.h	70;"	d
MB_REG_CFG_ADDR_OFF	helper/deviceregistermap.h	61;"	d
MB_REG_CFG_BAUD_MSK	helper/deviceregistermap.h	74;"	d
MB_REG_CFG_BAUD_OFF	helper/deviceregistermap.h	65;"	d
MB_REG_CFG_LOCK_MSK	helper/deviceregistermap.h	71;"	d
MB_REG_CFG_LOCK_OFF	helper/deviceregistermap.h	62;"	d
MB_REG_CFG_MODE_MSK	helper/deviceregistermap.h	72;"	d
MB_REG_CFG_MODE_OFF	helper/deviceregistermap.h	63;"	d
MB_REG_CFG_OFFSET	helper/deviceregistermap.h	48;"	d
MB_REG_CFG_PARITY_MSK	helper/deviceregistermap.h	73;"	d
MB_REG_CFG_PARITY_OFF	helper/deviceregistermap.h	64;"	d
MB_REG_CNTR_ADDR	helper/deviceregistermap.h	34;"	d
MB_REG_CTRL_OFFSET	helper/deviceregistermap.h	57;"	d
MB_REG_DC_SENSORSPAN_ADDR	helper/deviceregistermap.h	17;"	d
MB_REG_HARDVER_ADDR	helper/deviceregistermap.h	15;"	d
MB_REG_INMODE_ADDR	helper/deviceregistermap.h	26;"	d
MB_REG_INMODE_OFFSET	helper/deviceregistermap.h	51;"	d
MB_REG_INTYPE_ADDR	helper/deviceregistermap.h	25;"	d
MB_REG_INTYPE_OFFSET	helper/deviceregistermap.h	50;"	d
MB_REG_NAME_ADDR	helper/deviceregistermap.h	32;"	d
MB_REG_NAME_LENGTH	helper/deviceregistermap.h	33;"	d
MB_REG_PROD_OFFSET	helper/deviceregistermap.h	56;"	d
MB_REG_QUERY_ADDR	helper/deviceregistermap.h	24;"	d
MB_REG_QUERY_MSK	helper/deviceregistermap.h	78;"	d
MB_REG_QUERY_OFFSET	helper/deviceregistermap.h	49;"	d
MB_REG_SERIAL_ADDR	helper/deviceregistermap.h	30;"	d
MB_REG_SERIAL_LENGTH	helper/deviceregistermap.h	31;"	d
MB_REG_SID_OFFSET	helper/deviceregistermap.h	55;"	d
MB_REG_SOFTVER_ADDR	helper/deviceregistermap.h	29;"	d
MB_REG_SW_VER_OFFSET	helper/deviceregistermap.h	54;"	d
MB_REG_ZG_CNTL_ADDR	helper/deviceregistermap.h	22;"	d
MB_REG_ZG_LOCAL_ADDR	helper/deviceregistermap.h	20;"	d
MB_REG_ZG_PANID_ADDR	helper/deviceregistermap.h	19;"	d
MB_REG_ZG_TARGET_ADDR	helper/deviceregistermap.h	21;"	d
MainWindow	mainwindow.cpp	/^MainWindow::MainWindow(QWidget *parent)$/;"	f	class:MainWindow	signature:(QWidget *parent)
MainWindow	mainwindow.h	/^    MainWindow(QWidget *parent = 0);$/;"	p	class:MainWindow	access:public	signature:(QWidget *parent = 0)
MainWindow	mainwindow.h	/^class MainWindow : public QMainWindow$/;"	c	inherits:QMainWindow
MainWindow::COL	mainwindow.h	/^    const int COL = 3;$/;"	m	class:MainWindow	access:public
MainWindow::MainWindow	mainwindow.cpp	/^MainWindow::MainWindow(QWidget *parent)$/;"	f	class:MainWindow	signature:(QWidget *parent)
MainWindow::MainWindow	mainwindow.h	/^    MainWindow(QWidget *parent = 0);$/;"	p	class:MainWindow	access:public	signature:(QWidget *parent = 0)
MainWindow::ROW	mainwindow.h	/^    const int ROW = 4;$/;"	m	class:MainWindow	access:public
MainWindow::checkSerial	mainwindow.cpp	/^void MainWindow::checkSerial()$/;"	f	class:MainWindow	signature:()
MainWindow::checkSerial	mainwindow.h	/^    void checkSerial();$/;"	p	class:MainWindow	access:private	signature:()
MainWindow::flushWidgets	mainwindow.cpp	/^void MainWindow::flushWidgets(int mode)$/;"	f	class:MainWindow	signature:(int mode)
MainWindow::flushWidgets	mainwindow.h	/^    void flushWidgets(int mode);$/;"	p	class:MainWindow	access:private	signature:(int mode)
MainWindow::gridLayout	mainwindow.h	/^    QGridLayout *gridLayout;$/;"	m	class:MainWindow	access:public
MainWindow::gridWidget	mainwindow.h	/^    QVector<QWidget *> gridWidget;$/;"	m	class:MainWindow	access:public
MainWindow::log	mainwindow.h	/^    QTextEdit *log;$/;"	m	class:MainWindow	access:public
MainWindow::mode	mainwindow.h	/^    int mode = 0;$/;"	m	class:MainWindow	access:public
MainWindow::modeSize	mainwindow.h	/^    static const int modeSize = 10;$/;"	m	class:MainWindow	access:public
MainWindow::passSize	mainwindow.h	/^    static const int passSize = 12;$/;"	m	class:MainWindow	access:public
MainWindow::setting	mainwindow.h	/^    QPushButton *setting;$/;"	m	class:MainWindow	access:public
MainWindow::showWidget	mainwindow.cpp	/^void MainWindow::showWidget()$/;"	f	class:MainWindow	signature:()
MainWindow::showWidget	mainwindow.h	/^    void showWidget();$/;"	p	class:MainWindow	access:private	signature:()
MainWindow::startSet	mainwindow.cpp	/^void MainWindow::startSet()$/;"	f	class:MainWindow	signature:()
MainWindow::startSet	mainwindow.h	/^    void startSet();$/;"	p	class:MainWindow	access:public	signature:()
MainWindow::timerEvent	mainwindow.cpp	/^void MainWindow::timerEvent(QTimerEvent *event)$/;"	f	class:MainWindow	signature:(QTimerEvent *event)
MainWindow::timerEvent	mainwindow.h	/^    void timerEvent(QTimerEvent *event);$/;"	p	class:MainWindow	access:protected	signature:(QTimerEvent *event)
MainWindow::timing	mainwindow.h	/^    QLabel *timing;$/;"	m	class:MainWindow	access:public
MainWindow::~MainWindow	mainwindow.cpp	/^MainWindow::~MainWindow()$/;"	f	class:MainWindow	signature:()
MainWindow::~MainWindow	mainwindow.h	/^    ~MainWindow();$/;"	p	class:MainWindow	access:public	signature:()
ModbusParityMode	helper/deviceconfiguration.h	/^enum ModbusParityMode {$/;"	g
N_DEV_BAUDRATE	helper/deviceoperator.h	/^    static const int N_DEV_BAUDRATE = 11;$/;"	m	class:DeviceOperator	access:public
PASSWIDGET_H	passwidget.h	2;"	d
PNG	setting/DMSNavigation.cpp	/^namespace PNG$/;"	n	file:
PNG::Body	setting/DMSNavigation.cpp	/^   const unsigned char Body[215] =$/;"	m	namespace:PNG	file:
PNG::BodyClicked	setting/DMSNavigation.cpp	/^   unsigned char BodyClicked[237] =$/;"	m	namespace:PNG	file:
PNG::BodyClickedSize	setting/DMSNavigation.cpp	/^   const unsigned int BodyClickedSize = 237;$/;"	m	namespace:PNG	file:
PNG::BodyHover	setting/DMSNavigation.cpp	/^   const unsigned char BodyHover[226] =$/;"	m	namespace:PNG	file:
PNG::BodyHoverSize	setting/DMSNavigation.cpp	/^   const unsigned int BodyHoverSize = 226;$/;"	m	namespace:PNG	file:
PNG::BodySize	setting/DMSNavigation.cpp	/^   const unsigned int BodySize = 215;$/;"	m	namespace:PNG	file:
PNG::BorderLeft	setting/DMSNavigation.cpp	/^   const unsigned char BorderLeft[215] =$/;"	m	namespace:PNG	file:
PNG::BorderLeftSize	setting/DMSNavigation.cpp	/^   const unsigned int BorderLeftSize = 215;$/;"	m	namespace:PNG	file:
PNG::BorderRight	setting/DMSNavigation.cpp	/^   const unsigned char BorderRight[208] =$/;"	m	namespace:PNG	file:
PNG::BorderRightSize	setting/DMSNavigation.cpp	/^   const unsigned int BorderRightSize = 208;$/;"	m	namespace:PNG	file:
PassWidget	passwidget.cpp	/^PassWidget::PassWidget(QWidget *parent) :$/;"	f	class:PassWidget	signature:(QWidget *parent)
PassWidget	passwidget.cpp	/^PassWidget::PassWidget(int mode, int passNum)$/;"	f	class:PassWidget	signature:(int mode, int passNum)
PassWidget	passwidget.h	/^    PassWidget(int mode, int passNum);$/;"	p	class:PassWidget	access:public	signature:(int mode, int passNum)
PassWidget	passwidget.h	/^    explicit PassWidget(QWidget *parent = 0);$/;"	p	class:PassWidget	access:public	signature:(QWidget *parent = 0)
PassWidget	passwidget.h	/^class PassWidget : public QWidget$/;"	c	inherits:QWidget
PassWidget::PassWidget	passwidget.cpp	/^PassWidget::PassWidget(QWidget *parent) :$/;"	f	class:PassWidget	signature:(QWidget *parent)
PassWidget::PassWidget	passwidget.cpp	/^PassWidget::PassWidget(int mode, int passNum)$/;"	f	class:PassWidget	signature:(int mode, int passNum)
PassWidget::PassWidget	passwidget.h	/^    PassWidget(int mode, int passNum);$/;"	p	class:PassWidget	access:public	signature:(int mode, int passNum)
PassWidget::PassWidget	passwidget.h	/^    explicit PassWidget(QWidget *parent = 0);$/;"	p	class:PassWidget	access:public	signature:(QWidget *parent = 0)
PassWidget::flush	passwidget.cpp	/^void PassWidget::flush(int mode, int pass)$/;"	f	class:PassWidget	signature:(int mode, int pass)
PassWidget::flush	passwidget.h	/^    void flush(int mode, int pass);$/;"	p	class:PassWidget	access:public	signature:(int mode, int pass)
PassWidget::~PassWidget	passwidget.cpp	/^PassWidget::~PassWidget()$/;"	f	class:PassWidget	signature:()
PassWidget::~PassWidget	passwidget.h	/^    ~PassWidget();$/;"	p	class:PassWidget	access:public	signature:()
REG_HOLDING_NREGS	helper/deviceregistermap.h	13;"	d
REG_HOLDING_START	helper/deviceregistermap.h	12;"	d
ROW	mainwindow.h	/^    const int ROW = 4;$/;"	m	class:MainWindow	access:public
SETTINGDIALOG_H	setting/settingdialog.h	2;"	d
SETTINGWIDGET_H	setting/settingwidget.h	2;"	d
SETTINGWIDGET_H	settingwidget.h	2;"	d
SYSTEMSETTING_H	setting/tableWidget/systemsetting.h	2;"	d
SettingDialog	setting/settingdialog.cpp	/^SettingDialog::SettingDialog(QWidget *par)$/;"	f	class:SettingDialog	signature:(QWidget *par)
SettingDialog	setting/settingdialog.h	/^    SettingDialog(QWidget *par = 0);$/;"	p	class:SettingDialog	access:public	signature:(QWidget *par = 0)
SettingDialog	setting/settingdialog.h	/^class SettingDialog : public QDialog$/;"	c	inherits:QDialog
SettingDialog::SettingDialog	setting/settingdialog.cpp	/^SettingDialog::SettingDialog(QWidget *par)$/;"	f	class:SettingDialog	signature:(QWidget *par)
SettingDialog::SettingDialog	setting/settingdialog.h	/^    SettingDialog(QWidget *par = 0);$/;"	p	class:SettingDialog	access:public	signature:(QWidget *par = 0)
SettingDialog::homeButton	setting/settingdialog.h	/^    QPushButton *homeButton;$/;"	m	class:SettingDialog	access:public
SettingDialog::tableCollection	setting/settingdialog.h	/^    CollectionSetting *tableCollection;$/;"	m	class:SettingDialog	access:private
SettingDialog::titleSize	setting/settingdialog.h	/^    const int titleSize = 60;$/;"	m	class:SettingDialog	access:private
SettingWidget	setting/settingwidget.cpp	/^SettingWidget::SettingWidget(QWidget *parent) : QWidget(parent)$/;"	f	class:SettingWidget	signature:(QWidget *parent)
SettingWidget	setting/settingwidget.h	/^    explicit SettingWidget(QWidget *parent = 0);$/;"	p	class:SettingWidget	access:public	signature:(QWidget *parent = 0)
SettingWidget	setting/settingwidget.h	/^class SettingWidget : public QWidget$/;"	c	inherits:QWidget
SettingWidget	settingwidget.cpp	/^SettingWidget::SettingWidget()$/;"	f	class:SettingWidget	signature:()
SettingWidget	settingwidget.h	/^    SettingWidget();$/;"	p	class:SettingWidget	access:public	signature:()
SettingWidget	settingwidget.h	/^class SettingWidget$/;"	c
SettingWidget::SettingWidget	setting/settingwidget.cpp	/^SettingWidget::SettingWidget(QWidget *parent) : QWidget(parent)$/;"	f	class:SettingWidget	signature:(QWidget *parent)
SettingWidget::SettingWidget	setting/settingwidget.h	/^    explicit SettingWidget(QWidget *parent = 0);$/;"	p	class:SettingWidget	access:public	signature:(QWidget *parent = 0)
SettingWidget::SettingWidget	settingwidget.cpp	/^SettingWidget::SettingWidget()$/;"	f	class:SettingWidget	signature:()
SettingWidget::SettingWidget	settingwidget.h	/^    SettingWidget();$/;"	p	class:SettingWidget	access:public	signature:()
SystemSetting	setting/tableWidget/systemsetting.cpp	/^SystemSetting::SystemSetting(QWidget *parent) : QWidget(parent)$/;"	f	class:SystemSetting	signature:(QWidget *parent)
SystemSetting	setting/tableWidget/systemsetting.h	/^    explicit SystemSetting(QWidget *parent = 0);$/;"	p	class:SystemSetting	access:public	signature:(QWidget *parent = 0)
SystemSetting	setting/tableWidget/systemsetting.h	/^class SystemSetting : public QWidget$/;"	c	inherits:QWidget
SystemSetting::SystemSetting	setting/tableWidget/systemsetting.cpp	/^SystemSetting::SystemSetting(QWidget *parent) : QWidget(parent)$/;"	f	class:SystemSetting	signature:(QWidget *parent)
SystemSetting::SystemSetting	setting/tableWidget/systemsetting.h	/^    explicit SystemSetting(QWidget *parent = 0);$/;"	p	class:SystemSetting	access:public	signature:(QWidget *parent = 0)
TIMEWIDGET_H	timewidget.h	2;"	d
ZG_REG_CNTL_CHANNEL_MSK	helper/deviceregistermap.h	67;"	d
ZG_REG_CNTL_OFFSET	helper/deviceregistermap.h	46;"	d
ZG_REG_CNTL_STATE_MSK	helper/deviceregistermap.h	68;"	d
ZG_REG_LADDR_OFFSET	helper/deviceregistermap.h	44;"	d
ZG_REG_PANID_OFFSET	helper/deviceregistermap.h	43;"	d
ZG_REG_STATE_ACTIVE_MSK	helper/deviceregistermap.h	80;"	d
ZG_REG_TADDR_OFFSET	helper/deviceregistermap.h	45;"	d
ZIGBEESETTING_H	setting/tableWidget/zigbeesetting.h	2;"	d
ZigbeeSetting	setting/tableWidget/zigbeesetting.cpp	/^ZigbeeSetting::ZigbeeSetting(QWidget *parent) : QWidget(parent)$/;"	f	class:ZigbeeSetting	signature:(QWidget *parent)
ZigbeeSetting	setting/tableWidget/zigbeesetting.h	/^    explicit ZigbeeSetting(QWidget *parent = 0);$/;"	p	class:ZigbeeSetting	access:public	signature:(QWidget *parent = 0)
ZigbeeSetting	setting/tableWidget/zigbeesetting.h	/^class ZigbeeSetting : public QWidget$/;"	c	inherits:QWidget
ZigbeeSetting::ZigbeeSetting	setting/tableWidget/zigbeesetting.cpp	/^ZigbeeSetting::ZigbeeSetting(QWidget *parent) : QWidget(parent)$/;"	f	class:ZigbeeSetting	signature:(QWidget *parent)
ZigbeeSetting::ZigbeeSetting	setting/tableWidget/zigbeesetting.h	/^    explicit ZigbeeSetting(QWidget *parent = 0);$/;"	p	class:ZigbeeSetting	access:public	signature:(QWidget *parent = 0)
_MODBUSCRC_H	helper/modbuscrc.h	2;"	d
adcRefVoltage	helper/deviceconfiguration.h	/^    uint16_t adcRefVoltage;$/;"	m	struct:DataGatherConfiguration	access:public
adcStatus	helper/deviceconfiguration.h	/^    uint16_t adcStatus;$/;"	m	struct:DataGatherConfiguration	access:public
addTab	setting/DMSNavigation.cpp	/^   int addTab(const QIcon& icon, const QString& text);$/;"	p	class:DMSNavigationBar	file:	access:public	signature:(const QIcon& icon, const QString& text)
addTab	setting/DMSNavigation.cpp	/^   int addTab(const QString& text);$/;"	p	class:DMSNavigationBar	file:	access:public	signature:(const QString& text)
addTab	setting/DMSNavigation.cpp	/^int DMSNavigation::addTab(QWidget* widget, const QIcon& icon, const QString& text)$/;"	f	class:DMSNavigation	signature:(QWidget* widget, const QIcon& icon, const QString& text)
addTab	setting/DMSNavigation.cpp	/^int DMSNavigation::addTab(QWidget* widget, const QString& text)$/;"	f	class:DMSNavigation	signature:(QWidget* widget, const QString& text)
addTab	setting/DMSNavigation.cpp	/^int DMSNavigationBar::addTab(const QIcon& icon, const QString& text)$/;"	f	class:DMSNavigationBar	signature:(const QIcon& icon, const QString& text)
addTab	setting/DMSNavigation.cpp	/^int DMSNavigationBar::addTab(const QString& text)$/;"	f	class:DMSNavigationBar	signature:(const QString& text)
addTab	setting/DMSNavigation.h	/^   int addTab(QWidget* widget, const QIcon& icon, const QString& text);$/;"	p	class:DMSNavigation	access:public	signature:(QWidget* widget, const QIcon& icon, const QString& text)
addTab	setting/DMSNavigation.h	/^   int addTab(QWidget* widget, const QString& text);$/;"	p	class:DMSNavigation	access:public	signature:(QWidget* widget, const QString& text)
aucCRCHi	helper/modbuscrc.cpp	/^static const uint8_t aucCRCHi[] =$/;"	v	file:
aucCRCLo	helper/modbuscrc.cpp	/^static const uint8_t aucCRCLo[] =$/;"	v	file:
baudRateBox	setting/tableWidget/collectionsetting.h	/^    QComboBox   *baudRateBox;$/;"	m	class:CollectionSetting	access:public
calibrateDevice	helper/deviceoperator.cpp	/^void DeviceOperator::calibrateDevice(int dev)$/;"	f	class:DeviceOperator	signature:(int dev)
calibrateDevice	helper/deviceoperator.h	/^    void calibrateDevice(int dev);$/;"	p	class:DeviceOperator	access:public	signature:(int dev)
checkDigitBox	setting/tableWidget/collectionsetting.h	/^    QComboBox   *checkDigitBox;$/;"	m	class:CollectionSetting	access:public
checkSerial	mainwindow.cpp	/^void MainWindow::checkSerial()$/;"	f	class:MainWindow	signature:()
checkSerial	mainwindow.h	/^    void checkSerial();$/;"	p	class:MainWindow	access:private	signature:()
closeCollection	setting/tableWidget/collectionsetting.h	/^    void closeCollection();$/;"	p	class:CollectionSetting	access:public	signature:()
count	setting/DMSNavigation.cpp	/^   int count() const;$/;"	p	class:DMSNavigationBar	file:	access:public	signature:() const
count	setting/DMSNavigation.cpp	/^int DMSNavigation::count() const$/;"	f	class:DMSNavigation	signature:() const
count	setting/DMSNavigation.cpp	/^int DMSNavigationBar::count() const$/;"	f	class:DMSNavigationBar	signature:() const
count	setting/DMSNavigation.h	/^   int count() const;$/;"	p	class:DMSNavigation	access:public	signature:() const
currentChanged	setting/DMSNavigation.h	/^   void currentChanged(int index);$/;"	p	class:DMSNavigation	access:public	signature:(int index)
currentIndex	setting/DMSNavigation.cpp	/^   int currentIndex() const;$/;"	p	class:DMSNavigationBar	file:	access:public	signature:() const
currentIndex	setting/DMSNavigation.cpp	/^int DMSNavigation::currentIndex() const$/;"	f	class:DMSNavigation	signature:() const
currentIndex	setting/DMSNavigation.cpp	/^int DMSNavigationBar::currentIndex() const$/;"	f	class:DMSNavigationBar	signature:() const
currentIndex	setting/DMSNavigation.h	/^   int currentIndex() const;$/;"	p	class:DMSNavigation	access:public	signature:() const
dataLcd	timewidget.h	/^    QLCDNumber *dataLcd;$/;"	m	class:timeWidget	access:private
devID	helper/deviceconfiguration.h	/^    uint16_t devID;             \/\/ 采集器的Modbus地址$/;"	m	struct:DataGatherConfiguration	access:public
devIsLegal	helper/deviceoperator.h	/^    static bool devIsLegal(int devID)$/;"	f	class:DeviceOperator	access:public	signature:(int devID)
deviceADCResultGot	helper/deviceoperator.h	/^    void deviceADCResultGot(int dev, uint16_t* pRes);$/;"	p	class:DeviceOperator	access:public	signature:(int dev, uint16_t* pRes)
deviceInformationGot	helper/deviceoperator.h	/^    void deviceInformationGot(bool fSuccess, DataGatherConfiguration);$/;"	p	class:DeviceOperator	access:public	signature:(bool fSuccess, DataGatherConfiguration)
deviceOperator	mainwindow.cpp	/^DeviceOperator  *deviceOperator = NULL;$/;"	v
enterEvent	setting/DMSNavigation.cpp	/^   virtual void enterEvent(QEvent* event);$/;"	p	class:DMSNavigationBar	file:	access:protected	signature:(QEvent* event)
enterEvent	setting/DMSNavigation.cpp	/^void DMSNavigationBar::enterEvent(QEvent* event)$/;"	f	class:DMSNavigationBar	signature:(QEvent* event)
equArray	mainwindow.cpp	/^QVector<DataGatherConfiguration>   equArray;;$/;"	v
finishedDevCalibrate	helper/deviceoperator.h	/^    void finishedDevCalibrate(bool fSuccess);$/;"	p	class:DeviceOperator	access:public	signature:(bool fSuccess)
finishedDevCalibrate	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::finishedDevCalibrate(){}$/;"	f	class:CollectionSetting	signature:()
finishedDevCalibrate	setting/tableWidget/collectionsetting.h	/^    void    finishedDevCalibrate();$/;"	p	class:CollectionSetting	access:public	signature:()
finishedDevConfigSet	helper/deviceoperator.h	/^    void finishedDevConfigSet(bool fSuccess);$/;"	p	class:DeviceOperator	access:public	signature:(bool fSuccess)
finishedDevConfigSet	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::finishedDevConfigSet(){}$/;"	f	class:CollectionSetting	signature:()
finishedDevConfigSet	setting/tableWidget/collectionsetting.h	/^    void    finishedDevConfigSet();$/;"	p	class:CollectionSetting	access:public	signature:()
finishedDevSearching	helper/deviceoperator.h	/^    void finishedDevSearching();$/;"	p	class:DeviceOperator	access:public	signature:()
firmwareVersion	helper/deviceconfiguration.h	/^    uint16_t firmwareVersion;$/;"	m	struct:DataGatherConfiguration	access:public
flush	passwidget.cpp	/^void PassWidget::flush(int mode, int pass)$/;"	f	class:PassWidget	signature:(int mode, int pass)
flush	passwidget.h	/^    void flush(int mode, int pass);$/;"	p	class:PassWidget	access:public	signature:(int mode, int pass)
flushWidgets	mainwindow.cpp	/^void MainWindow::flushWidgets(int mode)$/;"	f	class:MainWindow	signature:(int mode)
flushWidgets	mainwindow.h	/^    void flushWidgets(int mode);$/;"	p	class:MainWindow	access:private	signature:(int mode)
getDeviceADCRes	helper/deviceoperator.cpp	/^void DeviceOperator::getDeviceADCRes(int dev)$/;"	f	class:DeviceOperator	signature:(int dev)
getDeviceADCRes	helper/deviceoperator.h	/^    void getDeviceADCRes(int dev);$/;"	p	class:DeviceOperator	access:public	signature:(int dev)
getDeviceInfo	helper/deviceoperator.cpp	/^void DeviceOperator::getDeviceInfo(int dev)$/;"	f	class:DeviceOperator	signature:(int dev)
getDeviceInfo	helper/deviceoperator.h	/^    void getDeviceInfo(int dev);$/;"	p	class:DeviceOperator	access:public	signature:(int dev)
getSearchMaxID	helper/deviceoperator.h	/^    int  getSearchMaxID(void) const { return maxSearchID; }$/;"	f	class:DeviceOperator	access:public	signature:(void) const
gridLayout	mainwindow.h	/^    QGridLayout *gridLayout;$/;"	m	class:MainWindow	access:public
gridWidget	mainwindow.h	/^    QVector<QWidget *> gridWidget;$/;"	m	class:MainWindow	access:public
hardwareVersion	helper/deviceconfiguration.h	/^    uint16_t hardwareVersion;$/;"	m	struct:DataGatherConfiguration	access:public
homeButton	setting/settingdialog.h	/^    QPushButton *homeButton;$/;"	m	class:SettingDialog	access:public
horizontalAlignment	setting/DMSNavigation.cpp	/^   DMSNavigation::HorizontalAlignment horizontalAlignment() const;$/;"	p	class:DMSNavigationBar	file:	access:public	signature:() const
horizontalAlignment	setting/DMSNavigation.cpp	/^DMSNavigation::HorizontalAlignment DMSNavigation::horizontalAlignment() const$/;"	f	class:DMSNavigation	signature:() const
horizontalAlignment	setting/DMSNavigation.cpp	/^DMSNavigation::HorizontalAlignment DMSNavigationBar::horizontalAlignment() const$/;"	f	class:DMSNavigationBar	signature:() const
horizontalAlignment	setting/DMSNavigation.h	/^   HorizontalAlignment horizontalAlignment() const;$/;"	p	class:DMSNavigation	access:public	signature:() const
icon	setting/DMSNavigation.cpp	/^   QPixmap icon;$/;"	m	class:DMSItem	file:	access:public
indexByPosition	setting/DMSNavigation.cpp	/^   int indexByPosition(const QPoint& position);$/;"	p	class:DMSNavigationBar	file:	access:private	signature:(const QPoint& position)
indexByPosition	setting/DMSNavigation.cpp	/^int DMSNavigationBar::indexByPosition(const QPoint& position)$/;"	f	class:DMSNavigationBar	signature:(const QPoint& position)
initButtonArrayUI	setting/tableWidget/collectionsetting.cpp	/^void CollectionSetting::initButtonArrayUI()$/;"	f	class:CollectionSetting	signature:()
initButtonArrayUI	setting/tableWidget/collectionsetting.h	/^    void    initButtonArrayUI();$/;"	p	class:CollectionSetting	access:private	signature:()
initCheckArrayUI	setting/tableWidget/collectionsetting.cpp	/^void CollectionSetting::initCheckArrayUI()$/;"	f	class:CollectionSetting	signature:()
initCheckArrayUI	setting/tableWidget/collectionsetting.h	/^    void    initCheckArrayUI();$/;"	p	class:CollectionSetting	access:private	signature:()
initDev	setting/tableWidget/collectionsetting.cpp	/^void CollectionSetting::initDev()$/;"	f	class:CollectionSetting	signature:()
initDev	setting/tableWidget/collectionsetting.h	/^    void    initDev();$/;"	p	class:CollectionSetting	access:private	signature:()
initMidWidgetUI	setting/tableWidget/collectionsetting.cpp	/^void CollectionSetting::initMidWidgetUI()$/;"	f	class:CollectionSetting	signature:()
initMidWidgetUI	setting/tableWidget/collectionsetting.h	/^    void    initMidWidgetUI();$/;"	p	class:CollectionSetting	access:private	signature:()
inputMode	helper/deviceconfiguration.h	/^    uint16_t inputMode;$/;"	m	struct:DataGatherConfiguration	access:public
inputType	helper/deviceconfiguration.h	/^    uint16_t inputType;$/;"	m	struct:DataGatherConfiguration	access:public
insertTab	setting/DMSNavigation.cpp	/^   int insertTab(int index, const QIcon& icon, const QString& text);$/;"	p	class:DMSNavigationBar	file:	access:public	signature:(int index, const QIcon& icon, const QString& text)
insertTab	setting/DMSNavigation.cpp	/^   int insertTab(int index, const QString& text);$/;"	p	class:DMSNavigationBar	file:	access:public	signature:(int index, const QString& text)
insertTab	setting/DMSNavigation.cpp	/^int DMSNavigation::insertTab(int index, QWidget* widget, const QIcon& icon, const QString& text)$/;"	f	class:DMSNavigation	signature:(int index, QWidget* widget, const QIcon& icon, const QString& text)
insertTab	setting/DMSNavigation.cpp	/^int DMSNavigation::insertTab(int index, QWidget* widget, const QString& text)$/;"	f	class:DMSNavigation	signature:(int index, QWidget* widget, const QString& text)
insertTab	setting/DMSNavigation.cpp	/^int DMSNavigationBar::insertTab(int index, const QIcon& icon, const QString& text)$/;"	f	class:DMSNavigationBar	signature:(int index, const QIcon& icon, const QString& text)
insertTab	setting/DMSNavigation.cpp	/^int DMSNavigationBar::insertTab(int index, const QString& text)$/;"	f	class:DMSNavigationBar	signature:(int index, const QString& text)
insertTab	setting/DMSNavigation.h	/^   int insertTab(int index, QWidget* widget, const QIcon& icon, const QString& text);$/;"	p	class:DMSNavigation	access:public	signature:(int index, QWidget* widget, const QIcon& icon, const QString& text)
insertTab	setting/DMSNavigation.h	/^   int insertTab(int index, QWidget* widget, const QString& text);$/;"	p	class:DMSNavigation	access:public	signature:(int index, QWidget* widget, const QString& text)
isClicked	setting/DMSNavigation.cpp	/^   bool isClicked;$/;"	m	class:DMSItem	file:	access:public
lastRect	setting/DMSNavigation.cpp	/^   QRect lastRect;$/;"	m	class:DMSItem	file:	access:public
leaveEvent	setting/DMSNavigation.cpp	/^   virtual void leaveEvent(QEvent* event);$/;"	p	class:DMSNavigationBar	file:	access:protected	signature:(QEvent* event)
leaveEvent	setting/DMSNavigation.cpp	/^void DMSNavigationBar::leaveEvent(QEvent* event)$/;"	f	class:DMSNavigationBar	signature:(QEvent* event)
lineArray	setting/tableWidget/collectionsetting.h	/^    QVector<QLineEdit *>            lineArray;$/;"	m	class:CollectionSetting	access:public
log	mainwindow.h	/^    QTextEdit *log;$/;"	m	class:MainWindow	access:public
m_alignment	setting/DMSNavigation.cpp	/^   DMSNavigation::HorizontalAlignment m_alignment;$/;"	m	class:DMSNavigationBar	file:	access:private
m_itemList	setting/DMSNavigation.cpp	/^   QList<DMSItem*> m_itemList;$/;"	m	class:DMSNavigationBar	file:	access:private
m_nCurrentIndex	setting/DMSNavigation.cpp	/^   int m_nCurrentIndex;$/;"	m	class:DMSNavigationBar	file:	access:private
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
mainLayout	setting/tableWidget/collectionsetting.h	/^    QHBoxLayout *mainLayout;$/;"	m	class:CollectionSetting	access:public
maxSearchID	helper/deviceoperator.h	/^    int maxSearchID;$/;"	m	class:DeviceOperator	access:private
modNumBox	setting/tableWidget/collectionsetting.h	/^    QComboBox   *modNumBox;$/;"	m	class:CollectionSetting	access:public
modbusBaudrate	helper/deviceconfiguration.h	/^    uint16_t modbusBaudrate;    \/\/ 采集器使用的波特率索引$/;"	m	struct:DataGatherConfiguration	access:public
modbusQuery	helper/deviceconfiguration.h	/^    uint16_t modbusQuery;$/;"	m	struct:DataGatherConfiguration	access:public
mode	mainwindow.h	/^    int mode = 0;$/;"	m	class:MainWindow	access:public
modeSize	mainwindow.h	/^    static const int modeSize = 10;$/;"	m	class:MainWindow	access:public
mouseMoveEvent	setting/DMSNavigation.cpp	/^   virtual void mouseMoveEvent(QMouseEvent* event);$/;"	p	class:DMSNavigationBar	file:	access:protected	signature:(QMouseEvent* event)
mouseMoveEvent	setting/DMSNavigation.cpp	/^void DMSNavigationBar::mouseMoveEvent(QMouseEvent* event)$/;"	f	class:DMSNavigationBar	signature:(QMouseEvent* event)
mousePressEvent	setting/DMSNavigation.cpp	/^   virtual void mousePressEvent(QMouseEvent* event);$/;"	p	class:DMSNavigationBar	file:	access:protected	signature:(QMouseEvent* event)
mousePressEvent	setting/DMSNavigation.cpp	/^void DMSNavigationBar::mousePressEvent(QMouseEvent* event)$/;"	f	class:DMSNavigationBar	signature:(QMouseEvent* event)
navigation	setting/DMSNavigation.h	/^   DMSNavigationBar* navigation;$/;"	m	class:DMSNavigation	access:private
navigationItemWidth	setting/DMSNavigation.cpp	/^   int navigationItemWidth(int index, int reserved);$/;"	p	class:DMSNavigationBar	file:	access:private	signature:(int index, int reserved)
navigationItemWidth	setting/DMSNavigation.cpp	/^int DMSNavigationBar::navigationItemWidth(int index, int reserved)$/;"	f	class:DMSNavigationBar	signature:(int index, int reserved)
navigationWidth	setting/DMSNavigation.cpp	/^   int navigationWidth();$/;"	p	class:DMSNavigationBar	file:	access:private	signature:()
navigationWidth	setting/DMSNavigation.cpp	/^int DMSNavigationBar::navigationWidth()$/;"	f	class:DMSNavigationBar	signature:()
onGotDevInfo	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::onGotDevInfo(bool isok,DataGatherConfiguration cfg)$/;"	f	class:CollectionSetting	signature:(bool isok,DataGatherConfiguration cfg)
onGotDevInfo	setting/tableWidget/collectionsetting.h	/^    void    onGotDevInfo(bool,DataGatherConfiguration);$/;"	p	class:CollectionSetting	access:public	signature:(bool,DataGatherConfiguration)
onSearchDeviceFinished	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::onSearchDeviceFinished()$/;"	f	class:CollectionSetting	signature:()
onSearchDeviceFinished	setting/tableWidget/collectionsetting.h	/^    void    onSearchDeviceFinished();$/;"	p	class:CollectionSetting	access:public	signature:()
onSetDevConfigFinished	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::onSetDevConfigFinished(bool isok)$/;"	f	class:CollectionSetting	signature:(bool isok)
onSetDevConfigFinished	setting/tableWidget/collectionsetting.h	/^    void    onSetDevConfigFinished(bool);$/;"	p	class:CollectionSetting	access:public	signature:(bool)
onTimeOut	timewidget.cpp	/^void timeWidget::onTimeOut()$/;"	f	class:timeWidget	signature:()
onTimeOut	timewidget.h	/^    void onTimeOut();$/;"	p	class:timeWidget	access:public	signature:()
paintContent	setting/DMSNavigation.cpp	/^   void paintContent(const QRectF& rect, QPainter* painter, int index, int reserved);$/;"	p	class:DMSNavigationBar	file:	access:private	signature:(const QRectF& rect, QPainter* painter, int index, int reserved)
paintContent	setting/DMSNavigation.cpp	/^void DMSNavigationBar::paintContent(const QRectF& rect, QPainter* painter, int index, int reserved)$/;"	f	class:DMSNavigationBar	signature:(const QRectF& rect, QPainter* painter, int index, int reserved)
paintEvent	setting/DMSNavigation.cpp	/^   virtual void paintEvent(QPaintEvent* event);$/;"	p	class:DMSNavigationBar	file:	access:protected	signature:(QPaintEvent* event)
paintEvent	setting/DMSNavigation.cpp	/^void DMSNavigationBar::paintEvent(QPaintEvent*)$/;"	f	class:DMSNavigationBar	signature:(QPaintEvent*)
paintItem	setting/DMSNavigation.cpp	/^   void paintItem(const QRectF& rect, QPainter* painter, int index, int reserved);$/;"	p	class:DMSNavigationBar	file:	access:private	signature:(const QRectF& rect, QPainter* painter, int index, int reserved)
paintItem	setting/DMSNavigation.cpp	/^void DMSNavigationBar::paintItem(const QRectF& rect, QPainter* painter, int index, int reserved)$/;"	f	class:DMSNavigationBar	signature:(const QRectF& rect, QPainter* painter, int index, int reserved)
paintLeftBorder	setting/DMSNavigation.cpp	/^   void paintLeftBorder(const QRectF& rect, QPainter* painter);$/;"	p	class:DMSNavigationBar	file:	access:private	signature:(const QRectF& rect, QPainter* painter)
paintLeftBorder	setting/DMSNavigation.cpp	/^void DMSNavigationBar::paintLeftBorder(const QRectF& rect, QPainter* painter)$/;"	f	class:DMSNavigationBar	signature:(const QRectF& rect, QPainter* painter)
paintRightBorder	setting/DMSNavigation.cpp	/^   void paintRightBorder(const QRectF& rect, QPainter* painter);$/;"	p	class:DMSNavigationBar	file:	access:private	signature:(const QRectF& rect, QPainter* painter)
paintRightBorder	setting/DMSNavigation.cpp	/^void DMSNavigationBar::paintRightBorder(const QRectF& rect, QPainter* painter)$/;"	f	class:DMSNavigationBar	signature:(const QRectF& rect, QPainter* painter)
parity	helper/deviceconfiguration.h	/^    ModbusParityMode parity;    \/\/ 采集器使用的校验方式$/;"	m	struct:DataGatherConfiguration	access:public
parseDeviceConfig	helper/deviceoperator.cpp	/^bool DeviceOperator::parseDeviceConfig(DataGatherConfiguration& cfg, uint16_t* devRegs, int nRegs)$/;"	f	class:DeviceOperator	signature:(DataGatherConfiguration& cfg, uint16_t* devRegs, int nRegs)
parseDeviceConfig	helper/deviceoperator.h	/^    bool parseDeviceConfig(DataGatherConfiguration&, uint16_t*, int);$/;"	p	class:DeviceOperator	access:private	signature:(DataGatherConfiguration&, uint16_t*, int)
passSize	mainwindow.h	/^    static const int passSize = 12;$/;"	m	class:MainWindow	access:public
port	helper/deviceoperator.h	/^    QSerialPort* port;$/;"	m	class:DeviceOperator	access:public
productName	helper/deviceconfiguration.h	/^    uint8_t  productName[MB_REG_NAME_LENGTH];$/;"	m	struct:DataGatherConfiguration	access:public
q_ptr	setting/DMSNavigation.cpp	/^   DMSNavigation* q_ptr;$/;"	m	class:DMSNavigationBar	file:	access:protected
radioArray	setting/tableWidget/collectionsetting.h	/^    QVector<QButtonGroup *>    radioArray;$/;"	m	class:CollectionSetting	access:public
readDevRegister	helper/deviceoperator.cpp	/^bool DeviceOperator::readDevRegister(uint16_t* pRegs, int dev, uint16_t startreg, uint16_t nRegisters)$/;"	f	class:DeviceOperator	signature:(uint16_t* pRegs, int dev, uint16_t startreg, uint16_t nRegisters)
readDevRegister	helper/deviceoperator.h	/^    bool readDevRegister(uint16_t* pRegs, int dev, uint16_t startreg, uint16_t nAddress);$/;"	p	class:DeviceOperator	access:private	signature:(uint16_t* pRegs, int dev, uint16_t startreg, uint16_t nAddress)
readEquPar	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::readEquPar(){}$/;"	f	class:CollectionSetting	signature:()
readEquPar	setting/tableWidget/collectionsetting.h	/^    void    readEquPar();$/;"	p	class:CollectionSetting	access:public	signature:()
readPassData	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::readPassData(){$/;"	f	class:CollectionSetting	signature:()
readPassData	setting/tableWidget/collectionsetting.h	/^    void    readPassData();$/;"	p	class:CollectionSetting	access:public	signature:()
readZigbeeData	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::readZigbeeData(){}$/;"	f	class:CollectionSetting	signature:()
readZigbeeData	setting/tableWidget/collectionsetting.h	/^    void    readZigbeeData();$/;"	p	class:CollectionSetting	access:public	signature:()
recvEdit	setting/tableWidget/collectionsetting.h	/^    QTextEdit       *recvEdit;$/;"	m	class:CollectionSetting	access:public
recvMsg	helper/deviceoperator.h	/^    void recvMsg(QByteArray);$/;"	p	class:DeviceOperator	access:public	signature:(QByteArray)
removeTab	setting/DMSNavigation.cpp	/^   void removeTab(int index);$/;"	p	class:DMSNavigationBar	file:	access:public	signature:(int index)
removeTab	setting/DMSNavigation.cpp	/^void DMSNavigation::removeTab(int index)$/;"	f	class:DMSNavigation	signature:(int index)
removeTab	setting/DMSNavigation.cpp	/^void DMSNavigationBar::removeTab(int index)$/;"	f	class:DMSNavigationBar	signature:(int index)
removeTab	setting/DMSNavigation.h	/^   void removeTab(int index);$/;"	p	class:DMSNavigation	access:public	signature:(int index)
run	helper/deviceoperator.cpp	/^void DeviceOperator::run()$/;"	f	class:DeviceOperator	signature:()
run	helper/deviceoperator.h	/^    void run();$/;"	p	class:DeviceOperator	access:protected	signature:()
searchDevices	helper/deviceoperator.cpp	/^void DeviceOperator::searchDevices()$/;"	f	class:DeviceOperator	signature:()
searchDevices	helper/deviceoperator.h	/^    void searchDevices();$/;"	p	class:DeviceOperator	access:public	signature:()
searchModNum	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::searchModNum()$/;"	f	class:CollectionSetting	signature:()
searchModNum	setting/tableWidget/collectionsetting.h	/^    void    searchModNum();$/;"	p	class:CollectionSetting	access:public	signature:()
sendEdit	setting/tableWidget/collectionsetting.h	/^    QTextEdit       *sendEdit;$/;"	m	class:CollectionSetting	access:public
sendMsg	helper/deviceoperator.h	/^    void sendMsg(QByteArray);$/;"	p	class:DeviceOperator	access:public	signature:(QByteArray)
serialID	helper/deviceconfiguration.h	/^    uint8_t  serialID[MB_REG_SERIAL_LENGTH];$/;"	m	struct:DataGatherConfiguration	access:public
setCurrentIndex	setting/DMSNavigation.cpp	/^   void setCurrentIndex(int index);$/;"	p	class:DMSNavigationBar	file:	access:public	signature:(int index)
setCurrentIndex	setting/DMSNavigation.cpp	/^void DMSNavigation::setCurrentIndex(int index)$/;"	f	class:DMSNavigation	signature:(int index)
setCurrentIndex	setting/DMSNavigation.cpp	/^void DMSNavigationBar::setCurrentIndex(int index)$/;"	f	class:DMSNavigationBar	signature:(int index)
setCurrentIndex	setting/DMSNavigation.h	/^   void setCurrentIndex(int index);$/;"	p	class:DMSNavigation	access:public	signature:(int index)
setDeviceConfig	helper/deviceoperator.cpp	/^void DeviceOperator::setDeviceConfig(DataGatherConfiguration oldCfg, DataGatherConfiguration newCfg)$/;"	f	class:DeviceOperator	signature:(DataGatherConfiguration oldCfg, DataGatherConfiguration newCfg)
setDeviceConfig	helper/deviceoperator.h	/^    void setDeviceConfig(DataGatherConfiguration, DataGatherConfiguration);$/;"	p	class:DeviceOperator	access:public	signature:(DataGatherConfiguration, DataGatherConfiguration)
setHorizontalAlignment	setting/DMSNavigation.cpp	/^   void setHorizontalAlignment(DMSNavigation::HorizontalAlignment alignment);$/;"	p	class:DMSNavigationBar	file:	access:public	signature:(DMSNavigation::HorizontalAlignment alignment)
setHorizontalAlignment	setting/DMSNavigation.cpp	/^void DMSNavigation::setHorizontalAlignment(DMSNavigation::HorizontalAlignment alignment)$/;"	f	class:DMSNavigation	signature:(DMSNavigation::HorizontalAlignment alignment)
setHorizontalAlignment	setting/DMSNavigation.cpp	/^void DMSNavigationBar::setHorizontalAlignment(DMSNavigation::HorizontalAlignment alignment)$/;"	f	class:DMSNavigationBar	signature:(DMSNavigation::HorizontalAlignment alignment)
setHorizontalAlignment	setting/DMSNavigation.h	/^   void setHorizontalAlignment(HorizontalAlignment alignment);$/;"	p	class:DMSNavigation	access:public	signature:(HorizontalAlignment alignment)
setModNum	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::setModNum(){}$/;"	f	class:CollectionSetting	signature:()
setModNum	setting/tableWidget/collectionsetting.h	/^    void    setModNum();$/;"	p	class:CollectionSetting	access:public	signature:()
setPassType	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::setPassType()$/;"	f	class:CollectionSetting	signature:()
setPassType	setting/tableWidget/collectionsetting.h	/^    void    setPassType();$/;"	p	class:CollectionSetting	access:public	signature:()
setSearchMaxID	helper/deviceoperator.h	/^    void setSearchMaxID(int max) { maxSearchID = max; }$/;"	f	class:DeviceOperator	access:public	signature:(int max)
setTabIcon	setting/DMSNavigation.cpp	/^   void setTabIcon(int index, const QIcon& icon);$/;"	p	class:DMSNavigationBar	file:	access:public	signature:(int index, const QIcon& icon)
setTabIcon	setting/DMSNavigation.cpp	/^void DMSNavigation::setTabIcon(int index, const QIcon& icon)$/;"	f	class:DMSNavigation	signature:(int index, const QIcon& icon)
setTabIcon	setting/DMSNavigation.cpp	/^void DMSNavigationBar::setTabIcon(int index, const QIcon& icon)$/;"	f	class:DMSNavigationBar	signature:(int index, const QIcon& icon)
setTabIcon	setting/DMSNavigation.h	/^   void setTabIcon(int index, const QIcon& icon);$/;"	p	class:DMSNavigation	access:public	signature:(int index, const QIcon& icon)
setTabText	setting/DMSNavigation.cpp	/^   void setTabText(int index, const QString& text);$/;"	p	class:DMSNavigationBar	file:	access:public	signature:(int index, const QString& text)
setTabText	setting/DMSNavigation.cpp	/^void DMSNavigation::setTabText(int index, const QString& text)$/;"	f	class:DMSNavigation	signature:(int index, const QString& text)
setTabText	setting/DMSNavigation.cpp	/^void DMSNavigationBar::setTabText(int index, const QString& text)$/;"	f	class:DMSNavigationBar	signature:(int index, const QString& text)
setTabText	setting/DMSNavigation.h	/^   void setTabText(int index, const QString& text);$/;"	p	class:DMSNavigation	access:public	signature:(int index, const QString& text)
setting	mainwindow.h	/^    QPushButton *setting;$/;"	m	class:MainWindow	access:public
showWidget	mainwindow.cpp	/^void MainWindow::showWidget()$/;"	f	class:MainWindow	signature:()
showWidget	mainwindow.h	/^    void showWidget();$/;"	p	class:MainWindow	access:private	signature:()
stacked	setting/DMSNavigation.h	/^   QStackedWidget stacked;$/;"	m	class:DMSNavigation	access:private
startSet	mainwindow.cpp	/^void MainWindow::startSet()$/;"	f	class:MainWindow	signature:()
startSet	mainwindow.h	/^    void startSet();$/;"	p	class:MainWindow	access:public	signature:()
stop	helper/deviceoperator.cpp	/^void DeviceOperator::stop()$/;"	f	class:DeviceOperator	signature:()
stop	helper/deviceoperator.h	/^    void stop();$/;"	p	class:DeviceOperator	access:public	signature:()
stopped	helper/deviceoperator.h	/^    bool stopped;$/;"	m	class:DeviceOperator	access:private
tabIcon	setting/DMSNavigation.cpp	/^   QIcon tabIcon(int index) const;$/;"	p	class:DMSNavigationBar	file:	access:public	signature:(int index) const
tabIcon	setting/DMSNavigation.cpp	/^QIcon DMSNavigation::tabIcon(int index) const$/;"	f	class:DMSNavigation	signature:(int index) const
tabIcon	setting/DMSNavigation.cpp	/^QIcon DMSNavigationBar::tabIcon(int index) const$/;"	f	class:DMSNavigationBar	signature:(int index) const
tabIcon	setting/DMSNavigation.h	/^   QIcon tabIcon(int index) const;$/;"	p	class:DMSNavigation	access:public	signature:(int index) const
tabText	setting/DMSNavigation.cpp	/^   QString tabText(int index) const;$/;"	p	class:DMSNavigationBar	file:	access:public	signature:(int index) const
tabText	setting/DMSNavigation.cpp	/^QString DMSNavigation::tabText(int index) const$/;"	f	class:DMSNavigation	signature:(int index) const
tabText	setting/DMSNavigation.cpp	/^QString DMSNavigationBar::tabText(int index) const$/;"	f	class:DMSNavigationBar	signature:(int index) const
tabText	setting/DMSNavigation.h	/^   QString tabText(int index) const;$/;"	p	class:DMSNavigation	access:public	signature:(int index) const
tableCollection	setting/settingdialog.h	/^    CollectionSetting *tableCollection;$/;"	m	class:SettingDialog	access:private
test	helper/deviceoperator.h	/^    void test(QString);$/;"	p	class:DeviceOperator	access:public	signature:(QString)
test	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::test(QString str){$/;"	f	class:CollectionSetting	signature:(QString str)
test	setting/tableWidget/collectionsetting.h	/^    void    test(QString);$/;"	p	class:CollectionSetting	access:public	signature:(QString)
timeLcd	timewidget.h	/^    QLCDNumber *timeLcd;$/;"	m	class:timeWidget	access:private
timeWidget	timewidget.cpp	/^timeWidget::timeWidget(QWidget *parent) : QWidget(parent)$/;"	f	class:timeWidget	signature:(QWidget *parent)
timeWidget	timewidget.h	/^    explicit timeWidget(QWidget *parent = 0);$/;"	p	class:timeWidget	access:public	signature:(QWidget *parent = 0)
timeWidget	timewidget.h	/^class timeWidget : public QWidget$/;"	c	inherits:QWidget
timeWidget::dataLcd	timewidget.h	/^    QLCDNumber *dataLcd;$/;"	m	class:timeWidget	access:private
timeWidget::onTimeOut	timewidget.cpp	/^void timeWidget::onTimeOut()$/;"	f	class:timeWidget	signature:()
timeWidget::onTimeOut	timewidget.h	/^    void onTimeOut();$/;"	p	class:timeWidget	access:public	signature:()
timeWidget::timeLcd	timewidget.h	/^    QLCDNumber *timeLcd;$/;"	m	class:timeWidget	access:private
timeWidget::timeWidget	timewidget.cpp	/^timeWidget::timeWidget(QWidget *parent) : QWidget(parent)$/;"	f	class:timeWidget	signature:(QWidget *parent)
timeWidget::timeWidget	timewidget.h	/^    explicit timeWidget(QWidget *parent = 0);$/;"	p	class:timeWidget	access:public	signature:(QWidget *parent = 0)
timerEvent	mainwindow.cpp	/^void MainWindow::timerEvent(QTimerEvent *event)$/;"	f	class:MainWindow	signature:(QTimerEvent *event)
timerEvent	mainwindow.h	/^    void timerEvent(QTimerEvent *event);$/;"	p	class:MainWindow	access:protected	signature:(QTimerEvent *event)
timing	mainwindow.h	/^    QLabel *timing;$/;"	m	class:MainWindow	access:public
title	setting/DMSNavigation.cpp	/^   QString title;$/;"	m	class:DMSItem	file:	access:public
titleSize	setting/settingdialog.h	/^    const int titleSize = 60;$/;"	m	class:SettingDialog	access:private
updateADCLine	setting/tableWidget/collectionsetting.cpp	/^void CollectionSetting::updateADCLine(int devId, uint16_t *pRes)$/;"	f	class:CollectionSetting	signature:(int devId, uint16_t *pRes)
updateADCLine	setting/tableWidget/collectionsetting.h	/^    void    updateADCLine(int devId, uint16_t *data);$/;"	p	class:CollectionSetting	access:public	signature:(int devId, uint16_t *data)
updateCheckArray	setting/tableWidget/collectionsetting.cpp	/^void CollectionSetting::updateCheckArray(QString str)$/;"	f	class:CollectionSetting	signature:(QString str)
updateCheckArray	setting/tableWidget/collectionsetting.h	/^    void    updateCheckArray(QString);$/;"	p	class:CollectionSetting	access:public	signature:(QString)
updateRecvText	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::updateRecvText(QByteArray msg){$/;"	f	class:CollectionSetting	signature:(QByteArray msg)
updateRecvText	setting/tableWidget/collectionsetting.h	/^    void    updateRecvText(QByteArray   msg);$/;"	p	class:CollectionSetting	access:public	signature:(QByteArray msg)
updateSendText	setting/tableWidget/collectionsetting.cpp	/^void    CollectionSetting::updateSendText(QByteArray msg){$/;"	f	class:CollectionSetting	signature:(QByteArray msg)
updateSendText	setting/tableWidget/collectionsetting.h	/^    void    updateSendText(QByteArray msg);$/;"	p	class:CollectionSetting	access:public	signature:(QByteArray msg)
usMBCRC16	helper/modbuscrc.cpp	/^uint16_t usMBCRC16(const uint8_t * pucFrame, uint16_t usLen)$/;"	f	signature:(const uint8_t * pucFrame, uint16_t usLen)
usMBCRC16	helper/modbuscrc.h	/^uint16_t usMBCRC16(const uint8_t * pucFrame, uint16_t usLen);$/;"	p	signature:(const uint8_t * pucFrame, uint16_t usLen)
width	setting/DMSNavigation.cpp	/^   inline int width(const QFontMetrics& fontMetrics) $/;"	f	class:DMSItem	access:public	signature:(const QFontMetrics& fontMetrics)
writeDevRegister	helper/deviceoperator.cpp	/^bool DeviceOperator::writeDevRegister(int dev, uint16_t regAddr, uint16_t value)$/;"	f	class:DeviceOperator	signature:(int dev, uint16_t regAddr, uint16_t value)
writeDevRegister	helper/deviceoperator.h	/^    bool writeDevRegister(int dev, uint16_t address, uint16_t value);$/;"	p	class:DeviceOperator	access:private	signature:(int dev, uint16_t address, uint16_t value)
zigbeeChannel	helper/deviceconfiguration.h	/^    uint16_t zigbeeChannel;$/;"	m	struct:DataGatherConfiguration	access:public
zigbeeExist	helper/deviceconfiguration.h	/^    bool zigbeeExist;$/;"	m	struct:DataGatherConfiguration	access:public
zigbeeLocalAddress	helper/deviceconfiguration.h	/^    uint16_t zigbeeLocalAddress;$/;"	m	struct:DataGatherConfiguration	access:public
zigbeePanID	helper/deviceconfiguration.h	/^    uint16_t zigbeePanID;$/;"	m	struct:DataGatherConfiguration	access:public
zigbeeTargetAddress	helper/deviceconfiguration.h	/^    uint16_t zigbeeTargetAddress;$/;"	m	struct:DataGatherConfiguration	access:public
~CollectionSetting	setting/tableWidget/collectionsetting.cpp	/^CollectionSetting::~CollectionSetting()$/;"	f	class:CollectionSetting	signature:()
~CollectionSetting	setting/tableWidget/collectionsetting.h	/^    ~CollectionSetting();$/;"	p	class:CollectionSetting	access:public	signature:()
~DMSNavigation	setting/DMSNavigation.cpp	/^DMSNavigation::~DMSNavigation()$/;"	f	class:DMSNavigation	signature:()
~DMSNavigation	setting/DMSNavigation.h	/^   ~DMSNavigation();$/;"	p	class:DMSNavigation	access:public	signature:()
~DMSNavigationBar	setting/DMSNavigation.cpp	/^   ~DMSNavigationBar();$/;"	p	class:DMSNavigationBar	file:	access:public	signature:()
~DMSNavigationBar	setting/DMSNavigation.cpp	/^DMSNavigationBar::~DMSNavigationBar()$/;"	f	class:DMSNavigationBar	signature:()
~MainWindow	mainwindow.cpp	/^MainWindow::~MainWindow()$/;"	f	class:MainWindow	signature:()
~MainWindow	mainwindow.h	/^    ~MainWindow();$/;"	p	class:MainWindow	access:public	signature:()
~PassWidget	passwidget.cpp	/^PassWidget::~PassWidget()$/;"	f	class:PassWidget	signature:()
~PassWidget	passwidget.h	/^    ~PassWidget();$/;"	p	class:PassWidget	access:public	signature:()
